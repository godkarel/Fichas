<?xml version="1.0" encoding="UTF-8"?>
<popupForm name="frmhabilidade" width="1050" height="650" >
	<import file="VerificaHabilidade.xml"/>	
	<import file="RolaHabilidadeDano.xml"/>	
	<scrollBox align="client">	 
		<image width="1050" height="720" center="true" visible="true" src="/imagens/3.png"/>
		<checkBox left="600" top="50" field="chuvinha" checked="false" fontColor="red" width="200" text="Magia da Chuva (liga/desliga)"/>		
		<dataLink field="chuvinha">
			<event name="onChange">
				if sheet.chuvinha ~= nil then
					if sheet.chuvinha == true then						
						self.imghability.visible = true;						
					else
						self.imghability.visible = false;						
					end;
				end;					
			</event>
        </dataLink>
		------------------------- Habilidade 1 --------------------------------------------------		
		<label left="200" top="15" width="250" height="40" fontColor="Indigo" fontStyle="bold" fontFamily="Nyala" fontSize="20" text="Pontos de Habilidade"/>
		<edit  left="413" top="20" width="30" fontSize="15" horzTextAlign="center" fontStyle="bold" hitTest="true" canFocus="true" height="30" field="PontoHabilidade"/>	
		<button text="Nova Magia"  width="125" height="40" left="10" top="10">
			<event name="onClick">
				self.rclListaDosItens3:append();
				
			</event>		
		</button>		
		<recordList name="rclListaDosItens3" field="ListaDeHabilidades" templateForm="frmItemDaLista3"
					width="450" height="550" left="70" top="60" selectable="true">                              
			<event name="onSelect"> 
				if sheet then
					FichaPrincipal = sheet
				end;          
				local node = self.rclListaDosItens3.selectedNode; 
				self.ListaJutsus3.node = node;                       
				self.ListaJutsus3.visible = (node ~= nil);

				if self.ListaJutsus3.visible == true then
					self.ListaJutsus3.node.NomeHabilidade = self.ListaJutsus3.node.NomeHabilidade or 'Nome da Habilidade';
					self.ListaJutsus3.node.DescriHabilidade1 = self.ListaJutsus3.node.DescriHabilidade1 or 'Descrição da Habilidade';
					self.ListaJutsus3.node.DanoHabilidade1 = tonumber(self.ListaJutsus3.node.DanoHabilidade1) or 0;
					self.ListaJutsus3.node.FixoHabilidade1 = tonumber(self.ListaJutsus3.node.FixoHabilidade1) or 0;
					self.ListaJutsus3.node.CuraHabilidade1 = tonumber(self.ListaJutsus3.node.CuraHabilidade1) or 0;
					self.ListaJutsus3.node.CustoHabilidade =tonumber( self.ListaJutsus3.node.CustoHabilidade) or 0;
					self.ListaJutsus3.node.DanoAtributo1 = self.ListaJutsus3.node.DanoAtributo1 or 'Escolha';
					self.ListaJutsus3.node.Hintensidade1 = tonumber(self.ListaJutsus3.node.Hintensidade1) or 0;	
					self.ListaJutsus3.node.LevelHabilidade = tonumber(self.ListaJutsus3.node.LevelHabilidade) or 0;	
					self.ListaJutsus3.node.CDHabilidade = tonumber(self.ListaJutsus3.node.CDHabilidade) or 0;	
					self.ListaJutsus3.node.RecargaHabilidade = tonumber(self.ListaJutsus3.node.RecargaHabilidade) or 0;	
					self.ListaJutsus3.node.ContaRecarga = tonumber(self.ListaJutsus3.node.ContaRecarga) or 0;	
					self.ListaJutsus3.node.TurnoAtual = tonumber(self.ListaJutsus3.node.TurnoAtual) or 0;
				end;

				local mesas = rrpg.getRooms();
				local bibliotecaAtual = mesas[1].library;
				
				local function obterNomesRecursivoH(bibItem)
					local itensFilhos = bibItem.children;
					local nomes = bibItem.name;
					
					for i = 1, #itensFilhos, 1 do
						local bibItemFilho = itensFilhos[i];
						local nomesDoFilho = obterNomesRecursivoH(bibItemFilho) or "";

						if nomesDoFilho == "Sistema de Combaate Velen" then
							-- Obter ID do personagem Loan
							local idPersonagem = bibItemFilho;

							-- Solicita acesso à ficha do personagem
							local promise = bibItemFilho:asyncOpenNDB();

							-- Aguarda até que a ficha esteja carregada
							local nodeExterno = await(promise);

							if nodeExterno.TurnoAtualControle ~= nil and nodeExterno.TurnoAtualControle ~= "" then
								self.ListaJutsus3.node.TurnoAtual = tonumber(nodeExterno.TurnoAtualControle)
							end;

						end
					end
					return nomes
				end
				
				if self.ListaJutsus3.node.TurnoAtual == 0 then 
					self.ListaJutsus3.node.ContaRecarga = 0
					self.ListaJutsus3.node.RecargaHabilidade = 0
				end;				

				local nomesDeTodosOsItens = obterNomesRecursivoH(bibliotecaAtual);

				if self.ListaJutsus3.node.ContaRecarga ~= nil and self.ListaJutsus3.node.ContaRecarga ~= "" and self.ListaJutsus3.node.ContaRecarga > 0 then
					self.ListaJutsus3.node.RecargaHabilidade = tonumber(self.ListaJutsus3.node.ContaRecarga) + tonumber(self.ListaJutsus3.node.CDHabilidade) -  tonumber(self.ListaJutsus3.node.TurnoAtual)
				end;

				if  0 > self.ListaJutsus3.node.RecargaHabilidade then
					self.ListaJutsus3.node.RecargaHabilidade = 0
				end;
					--------------- GAMBI DO COMBOBOX ----------------

				local valorOriginal = node.cmbTipoDeGrupoFH;
				
				-- 1. Aplica o valor temporário
				node.cmbTipoDeGrupoFH = "3";
				
				-- 2. Cria um delay usando uma função imediata
				local function aplicarDelay()
					-- 3. Restaura o valor original
					node.cmbTipoDeGrupoFH = valorOriginal;
					
				end
				
				-- Alternativa 1: Usando uma tabela vazia para forçar um mini-delay
				for i = 1, 10 do end -- Loop vazio para criar um pequeno delay
				
				aplicarDelay();
				
				-- Alternativa 2: Se precisar de mais tempo, usar um hack com rolagem de dados
				-- mesaDoPersonagem.chat:rolarDados("1d1", "Delay", function() aplicarDelay() end);
			</event>			
			<event name="onEndEnumeration">
				if self.rclListaDosItens3.selectedNode == nil and sheet ~= nil then
					local nodes = ndb.getChildNodes(sheet.ListaDeHabilidades);               

					if #nodes > 0 then
						self.rclListaDosItens3.selectedNode = nodes[1];
					end;
				end;
			</event>
		</recordList>       
		<dataScopeBox name="ListaJutsus3" visible="false" width="490" height="580" left="540" top="60" >
			<rectangle  xradius="10" color="Transparent" yradius="10" width="460" height="560" left="1" top="1" >        
			<image name="imghability" align="client" style="stretch" visible="false" animate="true" src="https://i.pinimg.com/originals/91/95/f4/9195f4dd1b69f90038f627c8af422429.gif"/>
				<label left="60" top="10" width="200" height="40" fontFamily="Nyala" fontColor="Black" fontSize="20" text="Habilidade:"/>
				<image left="140" top="15" width="40" height="30" visible="true" field="fldImgIconSkill"/>
				<edit  left="180" top="15" width="230" height="30" fontSize="15" fontStyle="bold" field="NomeHabilidade"/>				
				<textEditor left="60" top="60" width="350" height="240" fontSize="15" fontStyle="bold" field="DescriHabilidade1"/>
				<label left="60" top="370" width="120" height="40" fontFamily="Nyala" fontColor="Black" fontSize="20" text="Dano"/>
				<edit left="115" top="375" width="50" height="30" type="number" field="DanoHabilidade1"/>
				<label left="310" top="370" width="60" height="40" fontFamily="Nyala" fontColor="Black" fontSize="20" text="Real"/>
				<edit left="350" top="375" width="60" height="30" type="number" field="FixoHabilidade1"/>
				<label left="180" top="370" width="60" height="40" fontFamily="Nyala" fontColor="Black" fontSize="20" text="Cura"/>
				<edit left="230" top="375" width="70" height="30"  type="number"  field="CuraHabilidade1"/>                               
				<label left="60" top="405" width="120" height="40" fontFamily="Nyala" fontColor="Black" fontSize="20" text="Custo"/>
				<edit left="115" top="410" width="50" height="30" type="number" field="CustoHabilidade"/>
				<edit left="400" top="405" width="40" height="30" visible="false" type="number" field="Custo2"/>							    
				<label left="172" top="410" width="120" height="40" fontFamily="Nyala" fontColor="Black" fontSize="20" text="Tipo"/>	
				<label left="85" top="295" width="120" height="40" fontFamily="Nyala" fontColor="Red" fontSize="16" text="OPÇÃO:"/>	
				<comboBox left="140" top="305" width="200" height="20" field="OpcaoHab" items="{'Ofensiva', 'Dano em Area', 'Cura', 'Cura em Area', 'Defensiva'}"/>							
				<comboBox left="207" top="420" width="100" height="18" field="DanoAtributo1" items="{'PA', 'PF', 'PM', 'PA+M/PA', 'PF+M/PF', 'PM+M/PM', 'M/PA', 'M/PF', 'M/PM', 'PA+PF', 'PF+PM', 'PA+PM', 'M/PA+PF', 'M/PA+PM', 'M/PF+PM', 'M/PF+PA', 'M/PM+PF',
	 'M/PM+PA', 'M/PA+M/PF', 'M/PF+M/PM', 'M/PA+M/PM', 'REAL PA', 'REAL PF', 'REAL PM', 'Efeito', 'Buff'}"/>
				<label left="310" top="405" width="60" height="40" fontFamily="Nyala" fontColor="Black" fontSize="20" text="Level"/>
				<button left="350" top="410" width="16" height="30" text="-">
					<event name="onClick">						
						local node = self.ListaJutsus3.node;
						sheet.PontoHabilidade = tonumber(sheet.PontoHabilidade) or 0;
						node.LevelHabilidade = tonumber(node.LevelHabilidade) or 0;
						
						if node.LevelHabilidade > 0 then 
							node.LevelHabilidade = tonumber(node.LevelHabilidade) - 1;
							sheet.PontoHabilidade = tonumber(sheet.PontoHabilidade) + 1;
						else
							showMessage("Voce não pode reduzir mais o nivel da sua Habilidade");
						end;						
					</event>
				</button>			
				<edit left="366" top="410	" width="27" height="30" canFocus="true" horzTextAlign="center" hitTest="true" type="number" field="LevelHabilidade"/>						
				<button left="393" top="410" width="16" height="30" text="+">
					<event name="onClick">
						local node = self.ListaJutsus3.node;
						sheet.PontoHabilidade = tonumber(sheet.PontoHabilidade) or 0;
						node.LevelHabilidade = tonumber(node.LevelHabilidade) or 0;
						
						if sheet.PontoHabilidade > 0 then 
							if 4 >= node.LevelHabilidade then
								node.LevelHabilidade = tonumber(node.LevelHabilidade) + 1;
								sheet.PontoHabilidade = tonumber(sheet.PontoHabilidade) - 1;
							else
								showMessage("Sua habilidade chegou ao nivel Maximo");
							end;
						else							
							showMessage("Voce não te mais pontos de Habilidade para Destribuir");
						end;	
					</event>
				</button>

				<label left="60" top="440" width="120" height="40" fontFamily="Nyala" fontColor="Black" fontSize="20" text="CD"/>
				<edit left="90" top="445" width="40" height="30" type="number" field="CDHabilidade"/>

				<label left="135" top="440" width="120" height="40" fontFamily="Nyala" fontColor="Black" fontSize="20" text="Recarga"/>
				<edit left="210" top="445" width="40" height="30" type="number" field="RecargaHabilidade"/>
				
				<button left="255" top="445" width="80" height="30" fontFamily="Nyala" fontColor="White" fontSize="20" text="Resetar">
					<event name="onClick">
						local node = self.rclListaDosItens3.selectedNode; 
						self.ListaJutsus3.node = node;  
						self.ListaJutsus3.node.RecargaHabilidade = 0;
						RecarregaCD();	
					</event>
				</button>

				<label left="255" top="440" width="120" height="40" visible="false" fontFamily="Nyala" fontColor="Black" fontSize="20" text="CONTA"/>
				<edit left="325" top="445" width="40" height="30" visible="false" type="number" field="ContaRecarga"/>
				
				<label left="220" top="500" width="120" height="40" fontFamily="Nyala" fontColor="blue" fontSize="20" text="Intensidade"/>
				<edit left="330" top="505" width="80" height="30" enabled="false" fontColor="Red" type="number" field="Hintensidade1"/>									
				<image left="60" top="460" width="150" height="150" src="/imagens/magia.png"/>
				<button left="220" top="550" fontColor="red" text="Apagar!" margins="{left=4, right=4, top=2, bottom=2}" width="150" >
				<event name="onClick">
						dialogs.confirmYesNo("Deseja realmente deletar esta habilidade?", 
							function(confirmado)
								if confirmado then
									NDB.deleteNode(self.rclListaDosItens3.selectedNode)
									
									if self.rclListaDosItens3.selectedNode == nil and sheet ~= nil then
										local nodes = ndb.getChildNodes(sheet.ListaDeHabilidades)               

										if #nodes > 0 then
											self.rclListaDosItens3.selectedNode = nodes[1]
										end
									end
								end
							end
						)

					</event>
				</button>
				<edit width="120" visible="false" field="naoEBuff"/>
				<flowLayout name="TargetName" scale="1" left="230" top="325	" width="150" height="40">
				<label text="Alvo:" fontColor="red" align="right"  width="75" />
						<comboBox items="{'Inimigo 1', 'Inimigo 2', 'Inimigo 3'}"
								values="{'1', '2', '3'}" value="1" fontColor="#FF6347" name="cmbInimigosH" width="150" height="25" />
				</flowLayout>
				
				<flowLayout name="NameTipoDeGrupo" scale="1" left="60" top="325" width="150" height="40">
					<label text="Grupo:" fontColor="green" align="right" width="75" />
					<comboBox items="{'Jogadores', 'Inimigos'}"
							values="{'1', '2'}" value="1" fontColor="#00FF7F" name="cmbTipoGrupoH" field="cmbTipoDeGrupoFH" width="150" height="25" >
							<event name="onClick">
								local node = self.rclListaDosItens3.selectedNode; 
								self.ListaJutsus3.node = node;                       
								self.ListaJutsus3.visible = (node ~= nil);

								if self.cmbTipoGrupoH.value == "1" then
									local mesas = rrpg.getRooms();
									local bibliotecaAtual = mesas[1].library;
									
									lista = {}

									local function obterNomesRecursivoH(bibItem)
										local itensFilhos = bibItem.children;
										local nomes = bibItem.name;

										
										
										for i = 1, #itensFilhos, 1 do
											local bibItemFilho = itensFilhos[i];
											local nomesDoFilho = obterNomesRecursivoH(bibItemFilho) or "";

											if nomesDoFilho == "Sistema de Combaate Velen" then
												-- Obter ID do personagem Loan
												local idPersonagem = bibItemFilho;

												-- Solicita acesso à ficha do personagem
												local promise = bibItemFilho:asyncOpenNDB();

												-- Aguarda até que a ficha esteja carregada
												local nodeExterno = await(promise);
												
												local nodesO = ndb.getChildNodes(nodeExterno.NomeOponentes)											
												
												for _, node in ipairs(nodesO) do
													if node.NomeDoOponenteVez then  -- Verifica se o campo NomeDoOponenteVez existe
														table.insert(lista, node.NomeDoOponenteVez)  -- Adiciona o valor do campo NomeDoOponenteVez à lista
														
													end
												end
												
												table.sort(lista)
												
											end
										end
										return nomes
									end

									

									local function atualizarComboBoxH()
										local comboBox = self.cmbInimigosH

										-- Adiciona os novos itens na ordem desejada
										table.insert(lista, "Alvo Simulado")  -- Penúltimo item
										table.insert(lista, "Dano em Área")   -- Último item
										table.insert(lista, "Cura em Área")   -- Último item

										comboBox.items = lista
										comboBox.values = lista
										comboBox.value = ""
									end

									local nomesDeTodosOsItens = obterNomesRecursivoH(bibliotecaAtual);
									atualizarComboBoxH()
								end

								if self.cmbTipoGrupoH.value == "2" then
									local mesas = rrpg.getRooms();
									local bibliotecaAtual = mesas[1].library;
									
									lista = {}

									local function obterNomesRecursivoH(bibItem)
										local itensFilhos = bibItem.children;
										local nomes = bibItem.name;
										
										for i = 1, #itensFilhos, 1 do
											local bibItemFilho = itensFilhos[i];
											local nomesDoFilho = obterNomesRecursivoH(bibItemFilho) or "";

											if nomesDoFilho == "Sistema de Combaate Velen" then
												-- Obter ID do personagem Loan
												local idPersonagem = bibItemFilho;

												-- Solicita acesso à ficha do personagem
												local promise = bibItemFilho:asyncOpenNDB();

												-- Aguarda até que a ficha esteja carregada
												local nodeExterno = await(promise);
												
												local nodesJ = ndb.getChildNodes(nodeExterno.NomeJogador)
												
												for _, node in ipairs(nodesJ) do
													if node.NomeDoPersonagemVez then  -- Verifica se o campo NomeDoPersonagemVez existe
														table.insert(lista, node.NomeDoPersonagemVez)  -- Adiciona o valor do campo NomeDoPersonagemVez à lista
													end
												end
												
												table.sort(lista)
												
											end
										end
										return nomes
									end

									local function atualizarComboBoxH()
										local comboBox = self.cmbInimigosH

										-- Adiciona os novos itens na ordem desejada
										table.insert(lista, "Alvo Simulado")  -- Penúltimo item
										table.insert(lista, "Dano em Área")   -- Último item
										table.insert(lista, "Cura em Área")   -- Último item

										comboBox.items = lista
										comboBox.values = lista
										comboBox.value = ""  -- Defina o primeiro item como selecionado por padrão
									end

									local nomesDeTodosOsItens = obterNomesRecursivoH(bibliotecaAtual);
									atualizarComboBoxH()
								end;

											if node.DanoAtributo1 == 'Cura' or node.DanoAtributo1 == 'Cura Fixa' then
												if self.cmbTipoGrupoH.value == "1" then
												local mesas = rrpg.getRooms();
												local bibliotecaAtual = mesas[1].library;
												
												lista = {}

												local function obterNomesRecursivoH(bibItem)
													local itensFilhos = bibItem.children;
													local nomes = bibItem.name;

													
													
													for i = 1, #itensFilhos, 1 do
														local bibItemFilho = itensFilhos[i];
														local nomesDoFilho = obterNomesRecursivoH(bibItemFilho) or "";

														if nomesDoFilho == "Sistema de Combaate Velen" then
															-- Obter ID do personagem Loan
															local idPersonagem = bibItemFilho;

															-- Solicita acesso à ficha do personagem
															local promise = bibItemFilho:asyncOpenNDB();

															-- Aguarda até que a ficha esteja carregada
															local nodeExterno = await(promise);
															
															local nodesO = ndb.getChildNodes(nodeExterno.NomeJogador)								
															
															for _, node in ipairs(nodesO) do
																if node.NomeDoPersonagemVez then  -- Verifica se o campo NomeDoPersonagemVez existe
																	table.insert(lista, node.NomeDoPersonagemVez)  -- Adiciona o valor do campo NomeDoPersonagemVez à lista
																end
															end
															
															table.sort(lista)
															
														end
													end
													return nomes
												end

												

												local function atualizarComboBoxH()
													local comboBox = self.cmbInimigosH

													-- Adiciona os novos itens na ordem desejada
													table.insert(lista, "Alvo Simulado")  -- Penúltimo item
													table.insert(lista, "Dano em Área")   -- Último item
													table.insert(lista, "Cura em Área")   -- Último item

													comboBox.items = lista
													comboBox.values = lista
													comboBox.value = ""
												end

												local nomesDeTodosOsItens = obterNomesRecursivoH(bibliotecaAtual);
												atualizarComboBoxH()
											end

											if self.cmbTipoGrupoH.value == "2" then
												local mesas = rrpg.getRooms();
												local bibliotecaAtual = mesas[1].library;
												
												lista = {}

												local function obterNomesRecursivoH(bibItem)
													local itensFilhos = bibItem.children;
													local nomes = bibItem.name;
													
													for i = 1, #itensFilhos, 1 do
														local bibItemFilho = itensFilhos[i];
														local nomesDoFilho = obterNomesRecursivoH(bibItemFilho) or "";

														if nomesDoFilho == "Sistema de Combaate Velen" then
															-- Obter ID do personagem Loan
															local idPersonagem = bibItemFilho;

															-- Solicita acesso à ficha do personagem
															local promise = bibItemFilho:asyncOpenNDB();

															-- Aguarda até que a ficha esteja carregada
															local nodeExterno = await(promise);
															
															local nodesJ = ndb.getChildNodes(nodeExterno.NomeJogador)
															
															for _, node in ipairs(nodesJ) do
																
																if node.NomeDoOponenteVez then  -- Verifica se o campo NomeDoOponenteVez existe
																	table.insert(lista, node.NomeDoOponenteVez)  -- Adiciona o valor do campo NomeDoOponenteVez à lista
																	
																end
															end
															
															table.sort(lista)
															
														end
													end
													return nomes
												end

												local function atualizarComboBoxH()
													local comboBox = self.cmbInimigosH

													-- Adiciona os novos itens na ordem desejada
													table.insert(lista, "Alvo Simulado")  -- Penúltimo item
													table.insert(lista, "Dano em Área")   -- Último item
													table.insert(lista, "Cura em Área")   -- Último item

													comboBox.items = lista
													comboBox.values = lista
													comboBox.value = ""  -- Defina o primeiro item como selecionado por padrão
												end

												local nomesDeTodosOsItens = obterNomesRecursivoH(bibliotecaAtual);
												atualizarComboBoxH()
											end;
								end;
                			</event>
					</comboBox>
				</flowLayout>	

				 <dataLink field="cmbTipoDeGrupoFH">
					<event name="onChange">
							local node = self.rclListaDosItens3.selectedNode; 
								self.ListaJutsus3.node = node;                       
								self.ListaJutsus3.visible = (node ~= nil);

								if self.cmbTipoGrupoH.value == "1" then
									local mesas = rrpg.getRooms();
									local bibliotecaAtual = mesas[1].library;
									
									lista = {}

									local function obterNomesRecursivoH(bibItem)
										local itensFilhos = bibItem.children;
										local nomes = bibItem.name;

										
										
										for i = 1, #itensFilhos, 1 do
											local bibItemFilho = itensFilhos[i];
											local nomesDoFilho = obterNomesRecursivoH(bibItemFilho) or "";

											if nomesDoFilho == "Sistema de Combaate Velen" then
												-- Obter ID do personagem Loan
												local idPersonagem = bibItemFilho;

												-- Solicita acesso à ficha do personagem
												local promise = bibItemFilho:asyncOpenNDB();

												-- Aguarda até que a ficha esteja carregada
												local nodeExterno = await(promise);
												
												local nodesO = ndb.getChildNodes(nodeExterno.NomeOponentes)											
												
												for _, node in ipairs(nodesO) do
													if node.NomeDoOponenteVez then  -- Verifica se o campo NomeDoOponenteVez existe
														table.insert(lista, node.NomeDoOponenteVez)  -- Adiciona o valor do campo NomeDoOponenteVez à lista
														
													end
												end
												
												table.sort(lista)
												
											end
										end
										return nomes
									end

									

									local function atualizarComboBoxH()
										local comboBox = self.cmbInimigosH

										-- Adiciona os novos itens na ordem desejada
										table.insert(lista, "Alvo Simulado")  -- Penúltimo item
										table.insert(lista, "Dano em Área")   -- Último item
										table.insert(lista, "Cura em Área")   -- Último item

										comboBox.items = lista
										comboBox.values = lista
										comboBox.value = ""
									end

									local nomesDeTodosOsItens = obterNomesRecursivoH(bibliotecaAtual);
									atualizarComboBoxH()
								end

								if self.cmbTipoGrupoH.value == "2" then
									local mesas = rrpg.getRooms();
									local bibliotecaAtual = mesas[1].library;
									
									lista = {}

									local function obterNomesRecursivoH(bibItem)
										local itensFilhos = bibItem.children;
										local nomes = bibItem.name;
										
										for i = 1, #itensFilhos, 1 do
											local bibItemFilho = itensFilhos[i];
											local nomesDoFilho = obterNomesRecursivoH(bibItemFilho) or "";

											if nomesDoFilho == "Sistema de Combaate Velen" then
												-- Obter ID do personagem Loan
												local idPersonagem = bibItemFilho;

												-- Solicita acesso à ficha do personagem
												local promise = bibItemFilho:asyncOpenNDB();

												-- Aguarda até que a ficha esteja carregada
												local nodeExterno = await(promise);
												
												local nodesJ = ndb.getChildNodes(nodeExterno.NomeJogador)
												
												for _, node in ipairs(nodesJ) do
													if node.NomeDoPersonagemVez then  -- Verifica se o campo NomeDoPersonagemVez existe
														table.insert(lista, node.NomeDoPersonagemVez)  -- Adiciona o valor do campo NomeDoPersonagemVez à lista
													end
												end
												
												table.sort(lista)
												
											end
										end
										return nomes
									end

									local function atualizarComboBoxH()
										local comboBox = self.cmbInimigosH

										-- Adiciona os novos itens na ordem desejada
										table.insert(lista, "Alvo Simulado")  -- Penúltimo item
										table.insert(lista, "Dano em Área")   -- Último item
										table.insert(lista, "Cura em Área")   -- Último item

										comboBox.items = lista
										comboBox.values = lista
										comboBox.value = ""  -- Defina o primeiro item como selecionado por padrão
									end

									local nomesDeTodosOsItens = obterNomesRecursivoH(bibliotecaAtual);
									atualizarComboBoxH()
								end;

											if node.DanoAtributo1 == 'Cura' or node.DanoAtributo1 == 'Cura Fixa' then
												if self.cmbTipoGrupoH.value == "1" then
												local mesas = rrpg.getRooms();
												local bibliotecaAtual = mesas[1].library;
												
												lista = {}

												local function obterNomesRecursivoH(bibItem)
													local itensFilhos = bibItem.children;
													local nomes = bibItem.name;

													
													
													for i = 1, #itensFilhos, 1 do
														local bibItemFilho = itensFilhos[i];
														local nomesDoFilho = obterNomesRecursivoH(bibItemFilho) or "";

														if nomesDoFilho == "Sistema de Combaate Velen" then
															-- Obter ID do personagem Loan
															local idPersonagem = bibItemFilho;

															-- Solicita acesso à ficha do personagem
															local promise = bibItemFilho:asyncOpenNDB();

															-- Aguarda até que a ficha esteja carregada
															local nodeExterno = await(promise);
															
															local nodesO = ndb.getChildNodes(nodeExterno.NomeJogador)								
															
															for _, node in ipairs(nodesO) do
																if node.NomeDoPersonagemVez then  -- Verifica se o campo NomeDoPersonagemVez existe
																	table.insert(lista, node.NomeDoPersonagemVez)  -- Adiciona o valor do campo NomeDoPersonagemVez à lista
																end
															end
															
															table.sort(lista)
															
														end
													end
													return nomes
												end

												

												local function atualizarComboBoxH()
													local comboBox = self.cmbInimigosH

													-- Adiciona os novos itens na ordem desejada
													table.insert(lista, "Alvo Simulado")  -- Penúltimo item
													table.insert(lista, "Dano em Área")   -- Último item
													table.insert(lista, "Cura em Área")   -- Último item

													comboBox.items = lista
													comboBox.values = lista
													comboBox.value = ""
												end

												local nomesDeTodosOsItens = obterNomesRecursivoH(bibliotecaAtual);
												atualizarComboBoxH()
											end

											if self.cmbTipoGrupoH.value == "2" then
												local mesas = rrpg.getRooms();
												local bibliotecaAtual = mesas[1].library;
												
												lista = {}

												local function obterNomesRecursivoH(bibItem)
													local itensFilhos = bibItem.children;
													local nomes = bibItem.name;
													
													for i = 1, #itensFilhos, 1 do
														local bibItemFilho = itensFilhos[i];
														local nomesDoFilho = obterNomesRecursivoH(bibItemFilho) or "";

														if nomesDoFilho == "Sistema de Combaate Velen" then
															-- Obter ID do personagem Loan
															local idPersonagem = bibItemFilho;

															-- Solicita acesso à ficha do personagem
															local promise = bibItemFilho:asyncOpenNDB();

															-- Aguarda até que a ficha esteja carregada
															local nodeExterno = await(promise);
															
															local nodesJ = ndb.getChildNodes(nodeExterno.NomeJogador)
															
															for _, node in ipairs(nodesJ) do
																
																if node.NomeDoOponenteVez then  -- Verifica se o campo NomeDoOponenteVez existe
																	table.insert(lista, node.NomeDoOponenteVez)  -- Adiciona o valor do campo NomeDoOponenteVez à lista
																	
																end
															end
															
															table.sort(lista)
															
														end
													end
													return nomes
												end

												local function atualizarComboBoxH()
													local comboBox = self.cmbInimigosH

													-- Adiciona os novos itens na ordem desejada
													table.insert(lista, "Alvo Simulado")  -- Penúltimo item
													table.insert(lista, "Dano em Área")   -- Último item
													table.insert(lista, "Cura em Área")   -- Último item

													comboBox.items = lista
													comboBox.values = lista
													comboBox.value = ""  -- Defina o primeiro item como selecionado por padrão
												end

												local nomesDeTodosOsItens = obterNomesRecursivoH(bibliotecaAtual);
												atualizarComboBoxH()
											end;
								end;
						</event>
					</dataLink>			
				<button left="60" top="490" fontSize="20" opacity="0.1" height="90" width="150" text="Usar" fontColor="White" onClick="SoTesteH()"/>								
				<script>					
					function SoTesteH()
						
						local node = self.rclListaDosItens3.selectedNode; 
						self.ListaJutsus3.node = node;                       
						self.ListaJutsus3.visible = (node ~= nil);

						if self.cmbInimigosH.value == "" then
							showMessage("CADE O ALVO ?")
						else
							local nodeInimigo = await(ConsegueAlvoExterno(self, node, self.cmbInimigosH.value, node.cmbTipoDeGrupoFH, node.OpcaoHab));
							
							if nodeInimigo ~= nil then
								RolarHabilidadeNovo(self, node, self.cmbInimigosH.value, node.cmbTipoDeGrupoFH, nodeInimigo, node.OpcaoHab);
							else
								showMessage("Inimigo não encontrado.");
							end
						end;
					end																
				</script> 
			</rectangle>
		</dataScopeBox>
	</scrollBox>	 
</popupForm>