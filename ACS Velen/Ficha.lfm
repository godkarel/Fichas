<?xml version="1.0" encoding="UTF-8"?>
<form formType="sheetTemplate" dataType="br.com.rrpg.ACSVelen" 
      title="Sistema de Combate Velen" name="frmACSVelen">
	  <event name="onNodeReady">		
		sheet.ACAOTURNO = (tonumber(sheet.ACAOTURNO) or 0); 
		sheet.DanoRecebido = 0
	</event>
	 
	<import file="Funct/ProximaAcao.xml"/>
	 
	--- recordlist do jogador ---
	<button top="10" left="10" text="Adicionar Jogador" width="150" height="30">
		<event name="onClick">				                          
			self.rclGrupoJogadores:append();
		</event>
	</button>
	
	<button top="10" left="200" text="Combatentes" width="150" height="30">
		<event name="onClick">				                          
			

			-- Chama a função para criar e incrementar a lista
			criarEIncrementarLista()


		</event>
	</button>
	
	<button top="10" left="400" text="Inicia Combate" width="150" height="30">
		<event name="onClick">	
		
		if self.TrocadorDeAcao.enabled == false then
			self.TrocadorDeAcao.enabled = true
			self.AvisoDeTempo.enabled = true
		else 
			self.TrocadorDeAcao.enabled = false
			self.AvisoDeTempo.enabled = false
			sheet.AcaoAtual = nil
		end 
		
		</event>
	</button>
	
	<recordList top="40" left="10" width="600" height="300" name="rclGrupoJogadores"  field="NomeJogador" templateForm="frmItemJogador"
				selectable="true">                              
		<event name="onSelect">
			local node = self.rclGrupoJogadores.selectedNode; 
			
			self.BoxDetalheJogadores.node = node;

			self.rclGrupoJogadores:sort();
			
			self.BoxDetalheJogadores.visible = (node ~= nil);

		</event>
		
		<event name="onCompare">
			return utils.compareStringPtBr(nodeA.Vez, nodeB.Vez);
        </event>

	</recordList>


	<dataScopeBox top="350" left="10" name="BoxDetalheJogadores"  visible="false" height="350"
				  width="600">
			<!-- Faça um layout "bonito" para sua caixa de detalhes =). Utilize a propriedade "field" nas tags aqui dentro   -->       
			<rectangle align="client" color="black" xradius="10" yradius="10"
					   height="180" padding="{top=3, left=3, right=3, bottom=3}">
				<layout align="left" width="150" margins="{right=2}">
					<image align="top" width="100" margins="{top=1}" src="http://fc03.deviantart.net/fs70/i/2011/234/5/4/dragon_aspects_by_rattlesnakedefender-d47ii5y.jpg"/>
					<label align="top" text="Jogador:" horzTextAlign="center" width="150" margins="{top=1}"/>
					<edit align="top" width="150" field="NomeDoPersonagem" margins="{top=1}"/>
					<button align="top" width="150" text="Sincronizar" margins="{right=1}"	>
						<event name="onClick">										
							if	self.BoxDetalheJogadores.visible == true then
								local node = self.rclGrupoJogadores.selectedNode;   
								self.rclGrupoJogadores.node = node;
								
								local mesas = rrpg.getRooms();
								local bibliotecaAtual = mesas[1].library;

								local function obterNomesRecursivo(bibItem)
									local itensFilhos = bibItem.children;
									local nomes = bibItem.name;

									for i = 1, #itensFilhos, 1 do
										local bibItemFilho = itensFilhos[i];
										local nomesDoFilho = obterNomesRecursivo(bibItemFilho) or "";

										if nomesDoFilho == node.NomeDoPersonagem then
											-- Obter ID do personagem Loan
											local idPersonagem = bibItemFilho;

											-- Solicita acesso à ficha do personagem
											local promise = bibItemFilho:asyncOpenNDB();

											-- Aguarda até que a ficha esteja carregada
											local nodeExterno = await(promise);

											-- Acessa o valor da força do personagem
											
											node.PA = nodeExterno.PA or '0';
											node.PM = nodeExterno.PM or '0';
											node.PF = nodeExterno.PF or '0';
											node.DEF = nodeExterno.DEFRED or '0';
											node.RES = nodeExterno.RESRED or '0';
											node.AC = nodeExterno.Acerto or '0';
											node.ACM = nodeExterno.AcertoMagico or '0';
											node.CR = nodeExterno.Critical or '0';
											node.CRM = nodeExterno.CMagico or '0';
											node.ESQ = nodeExterno.Esquiva or '0';
											node.Pers = math.floor(nodeExterno.Persistencia) or '0';
											node.Vez = node.Vez or '0';
											node.Atletismo = nodeExterno.TAtletismo or '0';
											node.Sabedoria = nodeExterno.TSabedoria or '0';
											node.Percepcao = nodeExterno.TPercepcao or '0';
											node.Acrobacia = nodeExterno.TAcrobacia or '0';
											node.Vigor = nodeExterno.TVigor or '0';
											node.HPBarMax = nodeExterno.HPTotal or '0';
											node.MPBarMax = nodeExterno.MPTotal or '0';
											node.HPBar = nodeExterno.HPTotal or '0';
											node.MPBar = nodeExterno.MPTotal or '0';
											node.NomeDoPersonagemVez = node.Vez .. " - " ..  node.NomeDoPersonagem
										end
									end
								return nomes								
									
								end

								local nomesDeTodosOsItens = obterNomesRecursivo(bibliotecaAtual);
								
							end;	
						</event>
					</button>			
					<progressBar align="top" width="150" color="red" field="HPBar" fieldMax="HPBarMax" margins="{top=1}">
					<label align="left" horzTextAlign="center" field="HPBar"/>
					<label align="client" horzTextAlign="center" text="/"/>
					<label align="right" horzTextAlign="center" field="HPBarMax"/>
					</progressBar>
					<progressBar align="top" width="150" color="blue" field="MPBar" fieldMax="MPBarMax" margins="{top=1}">	
					<label align="left" horzTextAlign="center" field="MPBar"/>
					<label align="right" horzTextAlign="center" text="---/---"/>
					<label align="right" horzTextAlign="center" field="MPBarMax"/>						
					</progressBar>
				</layout>
				
				<layout align="left" width="50" margins="{right=1}" >
					<label align="top" text="PA:" width="50" margins="{left=10}"/>
					<label align="top" text="PM:" width="50" margins="{left=10}"/>
					<label align="top" text="PF:" width="50" margins="{left=10}"/>
					<label align="top" text="DEF:" width="50" margins="{left=10}"/>
					<label align="top" text="RES:" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" text="AC:" width="50" margins="{left=10}"/>
					<label align="top" text="ACM:" width="50" margins="{left=10}"/>
					<label align="top" text="CR:" width="50" margins="{left=10}"/>
					<label align="top" text="CRM:" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" text="ESQ:" width="50" margins="{left=10}"/>
					<label align="top" text="Pers:" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" text="Vez:" fontColor="red" width="50" margins="{left=10}"/>
				</layout>
				
				<layout align="left" width="50" margins="{right=1}" >						
					<label align="top" field="PA" width="50" margins="{left=10}"/>
					<label align="top" field="PM" width="50" margins="{left=10}"/>
					<label align="top" field="PF" width="50" margins="{left=10}"/>
					<label align="top" field="DEF" width="50" margins="{left=10}"/>
					<label align="top" field="RES" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="AC" width="50" margins="{left=10}"/>
					<label align="top" field="ACM" width="50" margins="{left=10}"/>
					<label align="top" field="CR" width="50" margins="{left=10}"/>
					<label align="top" field="CRM" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="ESQ" width="50" margins="{left=10}"/>
					<label align="top" field="Pers" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<edit align="top" field="Vez" fontColor="red" width="50" margins="{left=10}"/>						
				</layout>
				
				<layout align="left" width="75" margins="{right=1}" >						
					<label align="top" text="Atletismo:" autoSize="true" margins="{left=10}"/>
					<label align="top" text="Sabedoria:" autoSize="true" margins="{left=10}"/>
					<label align="top" text="Percepcao:" autoSize="true" margins="{left=10}"/>
					<label align="top" text="Acrobacia:" autoSize="true" margins="{left=10}"/>
					<label align="top" text="Vigor:" autoSize="true" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>						
				</layout>
				
				<layout align="left" width="50" margins="{right=1}" >						
					<label align="top" field="Atletismo" width="50" margins="{left=10}"/>
					<label align="top" field="Sabedoria" width="50" margins="{left=10}"/>
					<label align="top" field="Percepcao" width="50" margins="{left=10}"/>
					<label align="top" field="Acrobacia" width="50" margins="{left=10}"/>
					<label align="top" field="Vigor" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>		
				</layout>               
			</rectangle>
	</dataScopeBox>
	
	--- controlador -----
	
	<label text="Controle de Turnos" left="620" width="150" top="10" fontSize="15"/>

    <!-- Campo para exibir o Turno Atual -->
    <layout left="620" top="40" width="200" height="60">
        <label text="Turno Atual:" align="top" autoSize="true" fontSize="16" fontColor="white"/>
        <edit name="editTurnoAtual" field="TurnoAtualControle" align="top" width="200" height="20" horzTextAlign="center"/>
        <button name="btnTurnoAnterior" text="AnteriorRR" align="left" width="90" height="20" top="40">
			<event name="onClick">										
				
			</event>
		</button>	
		
        <button name="btnTurnoProximo" text="Próximo" align="right" width="90" height="20" top="40">
			<event name="onClick">										
						
			</event>
		</button>
    </layout>

    <!-- Campo para exibir a Vez Atual -->
    <layout left="620" top="120" width="200" height="60">
        <label text="Vez Atual:" align="top" autoSize="true" fontSize="16" fontColor="white"/>
        <edit name="editVezAtual" field="VezAtualControle" align="top" width="200" height="20" readOnly="true" horzTextAlign="center"/>
        <button name="btnVezAnterior" text="ANTERIOR" align="left" width="90" height="20" top="40"/>
        <button name="btnVezProximo" text="PRÓXIMO" align="right" width="90" height="20" top="40"/>
    </layout>

    <!-- Campo para exibir a Ação Atual -->
    <layout left="620" top="200" width="200" height="60">
        <label text="Ação Atual:" align="top" autoSize="true" fontSize="16" fontColor="white"/>
        <edit name="editAcaoAtual" field="AcaoAtual" align="top" width="200" height="20" readOnly="false" horzTextAlign="center"/>
        <button name="btnAcaoAnterior" text="Anterior" align="left" width="90" height="20" top="40">
			<event name="onClick">										
				AnteriorAcao();
			</event>
		</button>
		
        <button name="btnAcaoProximo" text="Próximo" align="right" width="90" height="20" top="40">
			<event name="onClick">										
					ProximaAcao();
			</event>
		</button>
    </layout>
	
	<timer name="TrocadorDeAcao" interval="10000" enabled="false" onTimer="AcaoAtualControlador()"/>
	<timer name="AvisoDeTempo" interval="1000" enabled="false" onTimer="AvisoDeTempoControlador()"/>

	<script>
		local tempoDecorrido = 0
		local tempoTotal = 30
		
		
		
		function AcaoAtualControlador()
			local minhaMesa = Firecast.getRoomOf(sheet)
			local chat = minhaMesa.chat
			acoes = {"Ação De Buff", "Ação de Ataque", "Ação de Defesa"}
			criarEIncrementarLista();
			
			if acoes == nil then
				acoes = sheet.AcaoAtual
			end;
			
			if sheet.VezAtualIndex == nil then
				sheet.VezAtualIndex = 1
			else
				sheet.VezAtualControle = lista[sheet.VezAtualIndex]
			end;
			
			if sheet.VezAtualIndex >= #lista then
				sheet.VezAtualIndex = 1 -- reinicia o player para começar dnv
			end;

			if sheet.AcaoAtualIndex == nil then
				sheet.AcaoAtualIndex = 1  -- Inicializa com a primeira ação
				sheet.AcaoAtualControle = acoes[sheet.AcaoAtualIndex]
				sheet.TurnoAtualControle = (sheet.TurnoAtualControle or 0) + 1
			else
				sheet.AcaoAtualIndex = sheet.AcaoAtualIndex + 1
				if sheet.AcaoAtualIndex > #acoes then
					sheet.AcaoAtualIndex = 1  -- Reinicia o ciclo das ações
					sheet.TurnoAtualControle = (sheet.TurnoAtualControle or 0) + 1
					sheet.VezAtualIndex = sheet.VezAtualIndex + 1
					sheet.AcaoAtualControle = acoes[sheet.AcaoAtualIndex]
					sheet.VezAtualControle = lista[sheet.VezAtualIndex]
				end
			end

			sheet.AcaoAtual = acoes[sheet.AcaoAtualIndex]
			chat:enviarNarracao(sheet.AcaoAtual)

			-- Reiniciar o contador de tempo
			
			self.AvisoDeTempo.interval = 1000  -- Restaurar o intervalo do timer para 1 segundo
			self.AvisoDeTempo.enabled = true  -- Iniciar o timer de aviso de tempo
			AvisoDeTempoControlador()
		end


		function AvisoDeTempoControlador()
			local minhaMesa = Firecast.getRoomOf(sheet)
			local chat = minhaMesa.chat

			-- Incrementar o tempo decorrido
			tempoDecorrido = tempoDecorrido + 1
			local tempoRestante = tempoTotal - tempoDecorrido

			if tempoRestante == 10 then
				chat:enviarNarracao("Faltam " .. tempoRestante .. " segundos para a próxima ação, vez de " .. sheet.VezAtualControle)
			end
			
			if tempoRestante == 5 then
				chat:enviarNarracao("Faltam " .. tempoRestante .. " segundos para a próxima ação, vez de " .. sheet.VezAtualControle)
			end
			
			if tempoRestante == 5 then
				chat:enviarNarracao("Faltam " .. tempoRestante .. " segundos para a próxima ação, vez de " .. sheet.VezAtualControle)
			end
			
			if tempoRestante == 1 then
				-- Enviar mensagem de ação perdida
				chat:enviarNarracao("Você perdeu a ação!")

				-- Reiniciar o contador de tempo
				tempoDecorrido = 0
				self.AvisoDeTempo.interval = 10000  -- Restaurar o intervalo do timer para 10 segundos
				self.AvisoDeTempo.enabled = true  -- Reiniciar o timer de aviso de tempo
			end
		end

		function Aviso1SegundoControlador()
			local minhaMesa = Firecast.getRoomOf(sheet)
			local chat = minhaMesa.chat

			-- Enviar mensagem de ação perdida
			chat:enviarNarracao("Você perdeu a ação!")

			-- Reiniciar o contador de tempo
			tempoDecorrido = 0
			self.AvisoDeTempo.interval = 10000  -- Restaurar o intervalo do timer para 10 segundos
			self.AvisoDeTempo.enabled = true  -- Reiniciar o timer de aviso de tempo
		end
	
	function criarEIncrementarLista()
				if sheet ~= nil then
					local nodesJ = ndb.getChildNodes(sheet.NomeJogador)  -- Obtém todos os nós filhos do campo NomeJogador
					local nodesO = ndb.getChildNodes(sheet.NomeOponentes)  -- Obtém todos os nós filhos do campo NomeOponentes
					
					lista = {}  -- Cria uma nova lista

					-- Itera sobre os nós e adiciona o NomeDoPersonagemVez de cada um à lista
					for _, node in ipairs(nodesJ) do
						if node.NomeDoPersonagemVez then  -- Verifica se o campo NomeDoPersonagemVez existe
							table.insert(lista, node.NomeDoPersonagemVez)  -- Adiciona o valor do campo NomeDoPersonagemVez à lista
						end
					end
					
					-- Itera sobre os nós e adiciona o NomeDoOponenteVez de cada um à lista
					for _, node in ipairs(nodesO) do
						if node.NomeDoOponenteVez then  -- Verifica se o campo NomeDoOponenteVez existe
							table.insert(lista, node.NomeDoOponenteVez)  -- Adiciona o valor do campo NomeDoOponenteVez à lista
						end
					end

					-- Ordena a lista em ordem alfabética
					table.sort(lista)

					-- Concatena todos os itens da lista em uma única string
					local listaStr = ""
					for i, item in ipairs(lista) do
						listaStr = listaStr .. "Item " .. i .. ": " .. tostring(item) .. "\n"
					end
					-- Exibe a lista concatenada em um único showMessage
					
				else
					
				end
				
				return lista
			end
	</script>
	--- Recordlist do Oponente ---	
	<button top="10" left="830" text="Adicionar Oponentes" width="150" height="30">
		<event name="onClick">				                          
			self.rclGrupoOponentes:append();
		</event>
	</button>
	
	<recordList top="40" left="830" width="600" height="300" name="rclGrupoOponentes"  field="NomeOponentes" templateForm="frmItemOponente"
				selectable="true">                             
		<event name="onSelect">
			local node = self.rclGrupoOponentes.selectedNode; 
				
			self.BoxDetalheOponentes.node = node; 
			
			self.BoxDetalheOponentes.visible = (node ~= nil);
			
			self.rclGrupoOponentes:sort();
		</event>
		<event name="onCompare">
			return utils.compareStringPtBr(nodeA.Vez, nodeB.Vez);
        </event>
	</recordList>
	
	<dataScopeBox top="350" left="830" name="BoxDetalheOponentes"  visible="false" height="350"  width="600">
		<!-- Faça um layout "bonito" para sua caixa de detalhes =). Utilize a propriedade "field" nas tags aqui dentro   -->      
		<rectangle align="client" color="black" xradius="10" yradius="10"
				   height="180" padding="{top=3, left=3, right=3, bottom=3}">
			<layout align="left" width="150" margins="{right=2}">
				<image align="top" width="100" margins="{top=1}" src="http://fc03.deviantart.net/fs70/i/2011/234/5/4/dragon_aspects_by_rattlesnakedefender-d47ii5y.jpg"/>
				<label align="top" text="Jogador:" horzTextAlign="center" width="150" margins="{top=1}"/>
				<edit align="top" width="150" field="NomeDoOponente" margins="{top=1}"/>
				<button align="top" width="150" text="Sincronizar" margins="{right=1}"	>
					<event name="onClick">										
						if	self.BoxDetalheOponentes.visible == true then
							local node = self.rclGrupoOponentes.selectedNode;   
							self.rclGrupoOponentes.node = node;
							
							local mesas = rrpg.getRooms();
							local bibliotecaAtual = mesas[1].library;

							local function obterNomesRecursivo(bibItem)
								local itensFilhos = bibItem.children;
								local nomes = bibItem.name;

								for i = 1, #itensFilhos, 1 do
									local bibItemFilho = itensFilhos[i];
									local nomesDoFilho = obterNomesRecursivo(bibItemFilho) or "";

									if nomesDoFilho == node.NomeDoOponente then
										-- Obter ID do personagem Loan
										local idPersonagem = bibItemFilho;

										-- Solicita acesso à ficha do personagem
										local promise = bibItemFilho:asyncOpenNDB();

										-- Aguarda até que a ficha esteja carregada
										local nodeExterno = await(promise);

										-- Acessa o valor da força do personagem
										
										node.PA = nodeExterno.PA or '0';
										node.PM = nodeExterno.PM or '0';
										node.PF = nodeExterno.PF or '0';
										node.DEF = nodeExterno.DEFRED or '0';
										node.RES = nodeExterno.RESRED or '0';
										node.AC = nodeExterno.Acerto or '0';
										node.ACM = nodeExterno.AcertoMagico or '0';
										node.CR = nodeExterno.Critical or '0';
										node.CRM = nodeExterno.CMagico or '0';
										node.ESQ = nodeExterno.Esquiva or '0';
										node.Pers = (nodeExterno.Persistencia) or '0';
										node.Vez = node.Vez or '0';
										node.Atletismo = nodeExterno.TAtletismo or '0';
										node.Sabedoria = nodeExterno.TSabedoria or '0';
										node.Percepcao = nodeExterno.TPercepcao or '0';
										node.Acrobacia = nodeExterno.TAcrobacia or '0';
										node.Vigor = nodeExterno.TVigor or '0';
										node.HPBarMaxO = nodeExterno.HPTotal or '0';
										node.MPBarMaxO = nodeExterno.MPTotal or '0';
										node.HPBarO = nodeExterno.HPAtual or '0';
										node.MPBarO = nodeExterno.MPAtual or '0';
										node.NomeDoOponenteVez = node.Vez .. " - " ..  node.NomeDoOponente
									end
								end
							return nomes
							end
							local nomesDeTodosOsItens = obterNomesRecursivo(bibliotecaAtual);
						end;	
					</event>
				</button>			
				<progressBar align="top" width="150" color="yellow" field="HPBarO" fieldMax="HPBarMaxO" margins="{top=1}">
				<label align="left" horzTextAlign="center" field="HPBarO"/>
				<label align="client" horzTextAlign="center" text="/"/>
				<label align="right" horzTextAlign="center" field="HPBarMaxO"/>
				</progressBar>
				<progressBar align="top" width="150" color="blue" field="MPBarO" fieldMax="MPBarMaxO" margins="{top=1}">	
				<label align="left" horzTextAlign="center" field="MPBarO"/>
				<label align="right" horzTextAlign="center" text="---/---"/>
				<label align="right" horzTextAlign="center" field="MPBarMaxO"/>						
				</progressBar>
			</layout>
			
			<layout align="left" width="50" margins="{right=1}" >
				<label align="top" text="PA:" width="50" margins="{left=10}"/>
				<label align="top" text="PM:" width="50" margins="{left=10}"/>
				<label align="top" text="PF:" width="50" margins="{left=10}"/>
				<label align="top" text="DEF:" width="50" margins="{left=10}"/>
				<label align="top" text="RES:" width="50" margins="{left=10}"/>
				<label align="top" text="---" width="50" margins="{left=10}"/>
				<label align="top" text="AC:" width="50" margins="{left=10}"/>
				<label align="top" text="ACM:" width="50" margins="{left=10}"/>
				<label align="top" text="CR:" width="50" margins="{left=10}"/>
				<label align="top" text="CRM:" width="50" margins="{left=10}"/>
				<label align="top" text="---" width="50" margins="{left=10}"/>
				<label align="top" text="ESQ:" width="50" margins="{left=10}"/>
				<label align="top" text="Pers:" width="50" margins="{left=10}"/>
				<label align="top" text="---" width="50" margins="{left=10}"/>
				<label align="top" text="Vez:" fontColor="red" width="50" margins="{left=10}"/>
			</layout>
			
			<layout align="left" width="50" margins="{right=1}" >
				<label align="top" field="PA" width="50" margins="{left=10}"/>
				<label align="top" field="PM" width="50" margins="{left=10}"/>
				<label align="top" field="PF" width="50" margins="{left=10}"/>
				<label align="top" field="DEF" width="50" margins="{left=10}"/>
				<label align="top" field="RES" width="50" margins="{left=10}"/>
				<label align="top" text="---" width="50" margins="{left=10}"/>
				<label align="top" field="AC" width="50" margins="{left=10}"/>
				<label align="top" field="ACM" width="50" margins="{left=10}"/>
				<label align="top" field="CR" width="50" margins="{left=10}"/>
				<label align="top" field="CRM" width="50" margins="{left=10}"/>
				<label align="top" text="---" width="50" margins="{left=10}"/>
				<label align="top" field="ESQ" width="50" margins="{left=10}"/>
				<label align="top" field="Pers" width="50" margins="{left=10}"/>
				<label align="top" text="---" width="50" margins="{left=10}"/>
				<edit align="top" field="Vez" fontColor="red" width="50" margins="{left=10}"/>
			</layout>
			
			<layout align="left" width="75" margins="{right=1}" >
				<label align="top" text="Atletismo:" autoSize="true" margins="{left=10}"/>
				<label align="top" text="Sabedoria:" autoSize="true" margins="{left=10}"/>
				<label align="top" text="Percepcao:" autoSize="true" margins="{left=10}"/>
				<label align="top" text="Acrobacia:" autoSize="true" margins="{left=10}"/>
				<label align="top" text="Vigor:" autoSize="true" margins="{left=10}"/>
				<label align="top" text="---" width="50" margins="{left=10}"/>
			</layout>
			
			<layout align="left" width="50" margins="{right=1}" >
				<label align="top" field="Atletismo" width="50" margins="{left=10}"/>
				<label align="top" field="Sabedoria" width="50" margins="{left=10}"/>
				<label align="top" field="Percepcao" width="50" margins="{left=10}"/>
				<label align="top" field="Acrobacia" width="50" margins="{left=10}"/>
				<label align="top" field="Vigor" width="50" margins="{left=10}"/>
				<label align="top" text="---" width="50" margins="{left=10}"/>						
			</layout>			 
		</rectangle>
	</dataScopeBox>
	
	<dataLink fields="{'ACAOTURNO'}">
		<event name="onChange">            
		    if sheet.GrupoRecebido == "1" then
				local nodes = ndb.getChildNodes(sheet.NomeOponentes)
					
				for _, node in ipairs(nodes) do
					if node.NomeDoOponenteVez == sheet.AlvoRecebido then
						node.HPBarO = node.HPBarO - sheet.DanoRecebido
						--AQUI--

						if	self.BoxDetalheOponentes.visible == true then
							local node = self.rclGrupoOponentes.selectedNode;   
							self.rclGrupoOponentes.node = node;
							
							local mesas = rrpg.getRooms();
							local bibliotecaAtual = mesas[1].library;

							local function obterNomesRecursivo(bibItem)
								local itensFilhos = bibItem.children;
								local nomes = bibItem.name;								

								for i = 1, #itensFilhos, 1 do
									local bibItemFilho = itensFilhos[i];
									local nomesDoFilho = obterNomesRecursivo(bibItemFilho) or "";									

									if nomesDoFilho == node.NomeDoOponente then
										-- Obter ID do personagem Loan
										local idPersonagem = bibItemFilho;

										-- Solicita acesso à ficha do personagem
										local promise = bibItemFilho:asyncOpenNDB();

										-- Aguarda até que a ficha esteja carregada
										local nodeExterno = await(promise);
										
										nodeExterno.HPAtual = node.HPBarO or '0';

									end
								end
							return nomes
							end
							local nomesDeTodosOsItens = obterNomesRecursivo(bibliotecaAtual);
						end;
					end
				end
			end;
			
			if sheet.GrupoRecebido == "2" then
				local nodes = ndb.getChildNodes(sheet.NomeJogador)
					
				for _, node in ipairs(nodes) do
					if node.NomeDoPersonagemVez == sheet.AlvoRecebido then
						node.HPBar = node.HPBar - sheet.DanoRecebido

						if	self.BoxDetalheJogadores.visible == true then
							local node = self.rclGrupoJogadores.selectedNode;   
							self.rclGrupoJogadores.node = node;
							
							local mesas = rrpg.getRooms();
							local bibliotecaAtual = mesas[1].library;

							local function obterNomesRecursivo(bibItem)
								local itensFilhos = bibItem.children;
								local nomes = bibItem.name;

								for i = 1, #itensFilhos, 1 do
									local bibItemFilho = itensFilhos[i];
									local nomesDoFilho = obterNomesRecursivo(bibItemFilho) or "";

									if nomesDoFilho == node.NomeDoPersonagem then
										-- Obter ID do personagem Loan
										local idPersonagem = bibItemFilho;

										-- Solicita acesso à ficha do personagem
										local promise = bibItemFilho:asyncOpenNDB();

										-- Aguarda até que a ficha esteja carregada
										local nodeExterno = await(promise);
										nodeExterno.HPAtual = node.HPBar or '0';
									end
								end
							return nomes
							end
							local nomesDeTodosOsItens = obterNomesRecursivo(bibliotecaAtual);
						end;
					end
				end
			end
		</event>
	</dataLink>

</form>
