<?xml version="1.0" encoding="UTF-8"?>
<form formType="sheetTemplate" dataType="br.com.rrpg.ACSVelen" 
      title="Sistema de Combate Velen" name="frmACSVelen">
	  <event name="onNodeReady">		
		sheet.ACAOTURNO = (tonumber(sheet.ACAOTURNO) or 0); 
		sheet.EditarStatus = sheet.EditarStatus or false
		sheet.AlvoRecebido = nil
		sheet.VezdeQuem = nil

		local personagem = rrpg.getPersonagemDe(sheet);                                
		
		if (personagem ~= nil) then
			local mesa = personagem.mesa;

			if not mesa.meuJogador.isMestre then  
			    self.rclGrupoJogadores.opacity = 0.0
				self.rclGrupoOponentes.opacity = 0.0
				self.BoxDetalheJogadores.opacity = 0.0
				self.BoxDetalheOponentes.opacity = 0.0
				self.LogCombat.opacity = 0.0
				self.btnResetLog.opacity = 0.0
			end;

			if (mesa.meuJogador.id) == 51345 then
				self.rclGrupoJogadores.opacity = 1.0
				self.rclGrupoOponentes.opacity = 1.0
				self.BoxDetalheJogadores.opacity = 1.0
				self.BoxDetalheOponentes.opacity = 1.0
				self.LogCombat.opacity = 1.0
				self.btnResetLog.opacity = 1.0
			end
		end; 

		ASCPrincipal = sheet     
		SelfFichPrincipalASC = self
		sheet.UsuarioEnvio = nil
		sheet.AcertouPergunta = nil

	</event>
	 
	<import file="Funct/ProximaAcao.xml"/>
	<import file="Funct/ProximaVez.xml"/>
	<import file="Funct/ProximoTurno.xml"/>
	<import file="Funct/AtualizaLog.xml"/>
	<import file="Funct/VerificaDanoEmAreaGPUm.xml"/>
	<import file="Funct/VerificaDanoEmAreaGPDois.xml"/>
	<import file="Funct/VerificaCuraEmAreaGPUm.xml"/>
	<import file="Funct/VerificaCuraEmAreaGPDois.xml"/>
	<import file="Funct/ControladorDuracaoEfeito.xml"/>
	<import file="Funct/QuemEnviou.xml"/>
	<import file="Funct/VerificaAlvo.xml"/>
	<import file="Funct/RolarHabilidadeProJogador.xml"/>
	<import file="Funct/CustoDeManaJogador.xml"/>
	<import file="Funct/SincronizaJogadorTurno.xml"/>
	<import file="Funct/SincronizaOponenteTurno.xml"/>
	<import file="Funct/SincronizaUmJogadorPorVez.xml"/>
	<import file="Funct/SincronizaUmOponentePorVez.xml"/>
	<import file="Funct/HabilidadeCura.xml"/>
	 
	--- recordlist do jogador ---
	<button top="10" left="10" text="Adicionar Jogador" width="150" height="30">
		<event name="onClick">				                          
			self.rclGrupoJogadores:append();
		</event>
	</button>
	
	<button top="10" left="200" text="Combatentes" width="150" height="30">
		<event name="onClick">				                          
			-- Chama a função para criar e incrementar a lista
			criarEIncrementarLista()
			criarEIncrementarListaVez();
			showMessage(sheet.PersonagensEmCombate)

		</event>
	</button>
	
	<button top="10" left="400" text="Inicia Combate" width="150" height="30">
		<event name="onClick">	
		
		if self.TrocadorDeAcao.enabled == false then
			self.TrocadorDeAcao.enabled = true
			self.AvisoDeTempo.enabled = true
		else 
			self.TrocadorDeAcao.enabled = false
			self.AvisoDeTempo.enabled = false
			sheet.AcaoAtual = nil
		end 
		
		</event>
	</button>
	
	<recordList top="40" left="10" width="600" height="300" name="rclGrupoJogadores"  field="NomeJogador" templateForm="frmItemJogador"
				selectable="true">                              
		<event name="onSelect">
			if sheet ~= nil then
				ASCPrincipal = sheet
				SelfFichPrincipalASC = self
				RclSelecionadoDaVez = self.rclGrupoJogadores.selectedNode
				RclSelecionado = sheet.NomeEfeito
				
			end;
			local node = self.rclGrupoJogadores.selectedNode; 
			
			self.BoxDetalheJogadores.node = node;

			
			
			self.BoxDetalheJogadores.visible = (node ~= nil);

			if	self.BoxDetalheJogadores.visible == true then
				local node = self.rclGrupoJogadores.selectedNode;   
				self.rclGrupoJogadores.node = node;

				if node.NomeDoPersonagemVez ~= nil and node.NomeDoPersonagemVez ~= "" then
				
					local mesas = rrpg.getRooms();
					local bibliotecaAtual = mesas[1].library;

					local function obterNomesRecursivo(bibItem)
						local itensFilhos = bibItem.children;
						local nomes = bibItem.name;

						for i = 1, #itensFilhos, 1 do
							local bibItemFilho = itensFilhos[i];
							local nomesDoFilho = obterNomesRecursivo(bibItemFilho) or "";

							if nomesDoFilho == node.NomeDoPersonagem then
								-- Obter ID do personagem Loan
								local idPersonagem = bibItemFilho;

								-- Solicita acesso à ficha do personagem
								local promise = bibItemFilho:asyncOpenNDB();

								-- Aguarda até que a ficha esteja carregada
								local nodeExterno = await(promise);

								-- Acessa o valor da força do personagem

								if nodeExterno.PA ~= nil or nodeExterno.PA == ""  then
									node.PA = tonumber(nodeExterno.PA) or '0';
									node.PM = tonumber(nodeExterno.PM) or '0';
									node.PF = tonumber(nodeExterno.PF) or '0';
									node.DEF = tonumber(nodeExterno.DEFRED) or '0';
									node.RES = tonumber(nodeExterno.RESRED) or '0';
									node.AC = tonumber(nodeExterno.Acerto) or '0';
									node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
									node.CR = tonumber(nodeExterno.Critical or '0');
									node.CRM = tonumber(nodeExterno.CMagico or '0');
									node.ESQ = tonumber(nodeExterno.Esquiva or '0');
									node.Pers = tonumber(math.floor(nodeExterno.Persistencia) or '0');
									node.Vez = node.Vez or '0';
									node.Atletismo = tonumber(nodeExterno.TAtletismo) or '0';
									node.Sabedoria = tonumber(nodeExterno.TSabedoria) or '0';
									node.Percepcao = tonumber(nodeExterno.TPercepcao) or '0';
									node.Acrobacia = tonumber(nodeExterno.TAcrobacia) or '0';
									node.Vigor = tonumber(nodeExterno.TVigor) or '0';
									node.HPBarMax = tonumber(nodeExterno.HPTotal) or '0';
									node.MPBarMax = tonumber(nodeExterno.MPTotal) or '0';
									node.HPBar = tonumber(nodeExterno.HPAtual) or '0';
									node.MPBar = tonumber(nodeExterno.MPAtual) or '0';
									node.NomeDoPersonagemVez = node.Vez .. " - " ..  node.NomeDoPersonagem
									node.imagemDoPersonagem = nodeExterno.imagemDoPersonagem
								else
									node.PA = tonumber(nodeExterno.Dano) or '0';
									node.PM = tonumber(nodeExterno.DanoMagico) or '0';
									node.PF = "NPC";
									node.DEF = tonumber(nodeExterno.DefesaPorCent) or '0';
									node.RES = tonumber(nodeExterno.ResistenciaPorCent) or '0';
									node.AC = tonumber(nodeExterno.Acerto) or '0';
									node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
									node.CR = tonumber(nodeExterno.Critical) or '0';
									node.CRM = tonumber(nodeExterno.CriticalMagico) or '0';
									node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
									node.Pers = tonumber(math.floor(nodeExterno.Persistencia) or '0');
									node.Vez = node.Vez or '0';
									node.Atletismo = tonumber(nodeExterno.Atletismo) or '0';
									node.Sabedoria = tonumber(nodeExterno.Sabedoria) or '0';
									node.Percepcao = tonumber(nodeExterno.Percepcao) or '0';
									node.Acrobacia = tonumber(nodeExterno.Acrobacia) or '0';
									node.Vigor = tonumber(nodeExterno.TVigor) or '0';
									node.HPBarMax = tonumber(nodeExterno.HPTotal) or '0';
									node.MPBarMax = tonumber(nodeExterno.MPTotal) or '0';
									node.HPBar = tonumber(nodeExterno.HPAtual) or '0';
									node.MPBar = tonumber(nodeExterno.MPAtual) or '0';
									node.NomeDoPersonagemVez = node.Vez .. " - " ..  nodeExterno.Nome
									node.imagemDoPersonagem = nodeExterno.imgInimigo
								end;
							end
						end
					return nomes								
						
					end

					local nomesDeTodosOsItens = obterNomesRecursivo(bibliotecaAtual);
				end;
								
			end;	

			self.rclGrupoJogadores:sort();

		</event>
		
		<event name="onCompare">
			return utils.compareStringPtBr(nodeA.Vez, nodeB.Vez);
        </event>

	</recordList>


	<dataScopeBox top="350" left="10" name="BoxDetalheJogadores"  visible="false" height="350"
				  width="600">
			<!-- Faça um layout "bonito" para sua caixa de detalhes =). Utilize a propriedade "field" nas tags aqui dentro   -->       
			<rectangle align="client" color="black" xradius="10" yradius="10"
					   height="180" padding="{top=3, left=3, right=3, bottom=3}">
				<layout align="left" width="150" margins="{right=2}">
					<image align="top" width="100" margins="{top=1}" field="imagemDoPersonagem" src="http://fc03.deviantart.net/fs70/i/2011/234/5/4/dragon_aspects_by_rattlesnakedefender-d47ii5y.jpg"/>
					<label align="top" text="Jogador:" horzTextAlign="center" width="150" margins="{top=1}"/>
					<edit align="top" width="150" field="NomeDoPersonagem" margins="{top=1}"/>
					<button align="top" width="150" text="Sincronizar" margins="{right=1}"	>
						<event name="onClick">		
							if	self.BoxDetalheJogadores.visible == true then
								local node = self.rclGrupoJogadores.selectedNode;   
								self.rclGrupoJogadores.node = node;
								
								local mesas = rrpg.getRooms();
								local bibliotecaAtual = mesas[1].library;

								local function obterNomesRecursivo(bibItem)
									local itensFilhos = bibItem.children;
									local nomes = bibItem.name;

									for i = 1, #itensFilhos, 1 do
										local bibItemFilho = itensFilhos[i];
										local nomesDoFilho = obterNomesRecursivo(bibItemFilho) or "";

										if nomesDoFilho == node.NomeDoPersonagem then
											-- Obter ID do personagem Loan
											local idPersonagem = bibItemFilho;

											-- Solicita acesso à ficha do personagem
											local promise = bibItemFilho:asyncOpenNDB();

											-- Aguarda até que a ficha esteja carregada
											local nodeExterno = await(promise);

											-- Acessa o valor da força do personagem

											if nodeExterno.PA ~= nil or nodeExterno.PA == ""  then
												node.PA = tonumber(nodeExterno.PA) or '0';
												node.PM = tonumber(nodeExterno.PM) or '0';
												node.PF = tonumber(nodeExterno.PF) or '0';
												node.DEF = tonumber(nodeExterno.DEFRED) or '0';
												node.RES = tonumber(nodeExterno.RESRED) or '0';
												node.AC = tonumber(nodeExterno.Acerto) or '0';
												node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
												node.CR = tonumber(nodeExterno.Critical) or '0';
												node.CRM = tonumber(nodeExterno.CMagico) or '0';
												node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
												node.Pers = tonumber(math.floor(nodeExterno.Persistencia) or '0');
												node.Vez = node.Vez or '0';
												node.Atletismo = tonumber(nodeExterno.TAtletismo) or '0';
												node.Sabedoria = tonumber(nodeExterno.TSabedoria) or '0';
												node.Percepcao = tonumber(nodeExterno.TPercepcao) or '0';
												node.Acrobacia = tonumber(nodeExterno.TAcrobacia) or '0';
												node.Vigor = tonumber(nodeExterno.TVigor) or '0';
												node.HPBarMax = tonumber(nodeExterno.HPTotal) or '0';
												node.MPBarMax = tonumber(nodeExterno.MPTotal) or '0';
												node.HPBar = tonumber(nodeExterno.HPAtual) or '0';
												node.MPBar = tonumber(nodeExterno.MPAtual) or '0';
												node.NomeDoPersonagemVez = node.Vez .. " - " ..  node.NomeDoPersonagem
												node.imagemDoPersonagem = nodeExterno.imagemDoPersonagem

												node.PAEffectTotal = 0;
												node.PMEffectTotal = 0;
												node.PFEffectTotal = 0;
												node.DEFEffectTotal = 0;
												node.RESEffectTotal = 0;
												node.ACEffectTotal = 0;
												node.ACMEffectTotal = 0;
												node.CREffectTotal = 0;
												node.CRMEffectTotal = 0;
												node.ESQEffectTotal = 0;
												node.PersEffectTotal = 0;
												node.HPTotalEffect = 0;
												node.MPTotalEffect = 0;
												node.DanoEffect = 0
												node.CustoEffect = 0 
												node.CuraEffect = 0  
												node.RegMPEffect = 0 
											else
												node.PA = tonumber(nodeExterno.Dano) or '0';
												node.PM = tonumber(nodeExterno.DanoMagico) or '0';
												node.PF = "NPC";
												node.DEF = tonumber(nodeExterno.DefesaPorCent) or '0';
												node.RES = tonumber(nodeExterno.ResistenciaPorCent) or '0';
												node.AC = tonumber(nodeExterno.Acerto) or '0';
												node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
												node.CR = tonumber(nodeExterno.Critical) or '0';
												node.CRM = tonumber(nodeExterno.CriticalMagico) or '0';
												node.ESQ = tonumber(nodeExterno.Esquiva or '0');
												node.Pers = tonumber(math.floor(nodeExterno.Persistencia) or '0');
												node.Vez = node.Vez or '0';
												node.Atletismo = tonumber(nodeExterno.Atletismo) or '0';
												node.Sabedoria = tonumber(nodeExterno.Sabedoria) or '0';
												node.Percepcao = tonumber(nodeExterno.Percepcao) or '0';
												node.Acrobacia = tonumber(nodeExterno.Acrobacia) or '0';
												node.Vigor = tonumber(nodeExterno.TVigor) or '0';
												node.HPBarMax = tonumber(nodeExterno.HPTotal) or '0';
												node.MPBarMax = tonumber(nodeExterno.MPTotal) or '0';
												node.HPBar = tonumber(nodeExterno.HPAtual) or '0';
												node.MPBar = tonumber(nodeExterno.MPAtual) or '0';
												node.NomeDoPersonagemVez = node.Vez .. " - " ..  nodeExterno.Nome
												node.imagemDoPersonagem = nodeExterno.imgInimigo

												node.PAEffectTotal = 0;
												node.PMEffectTotal = 0;
												node.PFEffectTotal = 0;
												node.DEFEffectTotal = 0;
												node.RESEffectTotal = 0;
												node.ACEffectTotal = 0;
												node.ACMEffectTotal = 0;
												node.CREffectTotal = 0;
												node.CRMEffectTotal = 0;
												node.ESQEffectTotal = 0;
												node.PersEffectTotal = 0;
												node.HPTotalEffect = 0;
												node.MPTotalEffect = 0;
												node.DanoEffect = 0
												node.CustoEffect = 0 
												node.CuraEffect = 0  
												node.RegMPEffect = 0 
											end;
										end
									end
								return nomes								
									
								end

								local nomesDeTodosOsItens = obterNomesRecursivo(bibliotecaAtual);
								
							end;	
						</event>
					</button>			
					<progressBar align="top" width="150" color="red" field="HPBar" fieldMax="HPBarMax" margins="{top=1}">
					<edit name="gambiHP" align="left" transparent="true" hitTest="false" horzTextAlign="center" field="HPBar"/>
					<edit name="edtHPAtual" visible="false" align="left" canFocus="false" transparent="true" hitTest="false" horzTextAlign="center" field="HPBarResolve"/>
					<label align="client" horzTextAlign="center" text="/"/>
					<label align="right" horzTextAlign="center" field="HPBarMax"/>
					</progressBar>
					<progressBar align="top" width="150" color="blue" field="MPBar" fieldMax="MPBarMax" margins="{top=1}">	
					<edit name="gambiMP" align="left" transparent="true" hitTest="false" horzTextAlign="center" field="MPBar"/>
					<edit name="edtMPAtual" visible="false" align="left" canFocus="false" transparent="true" hitTest="false" horzTextAlign="center" field="MPBarResolve"/>
					<label align="right" horzTextAlign="center" text="---/---"/>
					<label align="right" horzTextAlign="center" field="MPBarMax"/>						
					</progressBar>
					<button name="btnEditStatus" align="top" fontColor="white" width="150" text="Editar ✎" margins="{top=1}">
						<event name="onClick">
							
							-- Obtém o nó selecionado do recordList
							local node = self.rclGrupoJogadores.selectedNode;
							if not node then
								showMessage("Nenhum item foi selecionado!");
								return;
							end

							-- Localiza o botão dentro do contexto do item selecionado
							local btn = self:findControlByName("btnEditStatus");
							local gambiHP = self:findControlByName("gambiHP");
							local edtHP = self:findControlByName("edtHPAtual");
							local gambiMP = self:findControlByName("gambiMP");
							local edtMP = self:findControlByName("edtMPAtual");
							if not btn then
								showMessage("Botão não encontrado no item selecionado!");
								return;
							end

							-- Lógica para alternar entre editar e aplicar
							if btn.text == "Editar ✎" then
								btn.fontColor = "red";
								btn.text = "Aplicar 💾";
								edtHP.transparent = false
								edtHP.hitTest = true								
								edtHP.visible = true;
								edtHP.canFocus = true;
								gambiHP.visible = false;
								
								edtMP.transparent = false
								edtMP.hitTest = true
								edtMP.visible = true;
								edtMP.canFocus = true;
								gambiMP.visible = false;

								if self.BoxDetalheJogadores.visible == true then
									local node = self.rclGrupoJogadores.selectedNode;   
									self.rclGrupoJogadores.node = node;
									
									local mesas = rrpg.getRooms();
									local bibliotecaAtual = mesas[1].library;

									local function obterNomesRecursivo(bibItem)
										local itensFilhos = bibItem.children;
										local nomes = bibItem.name;

										for i = 1, #itensFilhos, 1 do
											local bibItemFilho = itensFilhos[i];
											local nomesDoFilho = obterNomesRecursivo(bibItemFilho) or "";

											if nomesDoFilho == node.NomeDoPersonagem then
												-- Obter ID do personagem Loan
												local idPersonagem = bibItemFilho;

												-- Solicita acesso à ficha do personagem
												local promise = bibItemFilho:asyncOpenNDB();

												-- Aguarda até que a ficha esteja carregada
												local nodeExterno = await(promise);

												-- Acessa o valor da força do personagem
												node.HPBarMax = tonumber(nodeExterno.HPTotal);
												node.MPBarMax = tonumber(nodeExterno.MPTotal);
												node.HPBar = tonumber(nodeExterno.HPAtual);
												node.MPBar = tonumber(nodeExterno.MPAtual);
											end
										end
										return nomes;
									end

									-- Certifique-se de chamar a função, se necessário
									obterNomesRecursivo(bibliotecaAtual);
								end
							else
								btn.fontColor = "white";
								btn.text = "Editar ✎";
								edtHP.transparent = true
								edtHP.hitTest = false
								edtHP.visible = false;
								gambiHP.visible = true;

								edtMP.transparent = true
								edtMP.hitTest = false
								edtMP.visible = false;
								gambiMP.visible = true;

								if	self.BoxDetalheJogadores.visible == true then
								local node = self.rclGrupoJogadores.selectedNode;   
								self.rclGrupoJogadores.node = node;
								
								local mesas = rrpg.getRooms();
								local bibliotecaAtual = mesas[1].library;

								local function obterNomesRecursivo(bibItem)
									local itensFilhos = bibItem.children;
									local nomes = bibItem.name;

									for i = 1, #itensFilhos, 1 do
										local bibItemFilho = itensFilhos[i];
										local nomesDoFilho = obterNomesRecursivo(bibItemFilho) or "";

										if nomesDoFilho == node.NomeDoPersonagem then
											-- Obter ID do personagem Loan
											local idPersonagem = bibItemFilho;

											-- Solicita acesso à ficha do personagem
											local promise = bibItemFilho:asyncOpenNDB();

											-- Aguarda até que a ficha esteja carregada
											local nodeExterno = await(promise);

											-- Acessa o valor da força do personagem

											if node.HPBarResolve ~= 0 and node.HPBarResolve ~= nil and node.HPBarResolve ~= "" then 
												local hpBarInput = tostring(node.HPBarResolve) -- Converte o valor para string, caso não seja
												if hpBarInput:match("^%+%d+$") then
													-- Se começar com "+", soma ao valor existente
													local valor = tonumber(hpBarInput:sub(2)) -- Remove o "+" e converte para número
													nodeExterno.HPAtual = (tonumber(node.HPBar) or 0) + valor
												elseif hpBarInput:match("^%-%d+$") then
													-- Se começar com "-", subtrai do valor existente
													local valor = tonumber(hpBarInput:sub(2)) -- Remove o "-" e converte para número
													nodeExterno.HPAtual = (tonumber(node.HPBar) or 0) - valor
												else
													-- Se não tiver "+" ou "-", aplica o valor diretamente
													nodeExterno.HPAtual = tonumber(hpBarInput)
												end
											end;

											if node.MPBarResolve ~= 0 and node.MPBarResolve ~= nil and node.MPBarResolve ~= "" then
												-- Ajuste para MPAtual
												local mpBarInput = tostring(node.MPBarResolve) -- Converte o valor para string, caso não seja
												if mpBarInput:match("^%+%d+$") then
													-- Se começar com "+", soma ao valor existente
													local valor = tonumber(mpBarInput:sub(2)) -- Remove o "+" e converte para número
													nodeExterno.MPAtual = (tonumber(node.MPBar) or 0) + valor
												elseif mpBarInput:match("^%-%d+$") then
													-- Se começar com "-", subtrai do valor existente
													local valor = tonumber(mpBarInput:sub(2)) -- Remove o "-" e converte para número
													nodeExterno.MPAtual = (tonumber(node.MPBar) or 0) - valor
												else
													-- Se não tiver "+" ou "-", aplica o valor diretamente
													nodeExterno.MPAtual = tonumber(mpBarInput)
												end
											end;
										end
									end
								return nomes								
									
								end

								local nomesDeTodosOsItens = obterNomesRecursivo(bibliotecaAtual);
								
							end;	

							if	self.BoxDetalheJogadores.visible == true then
								local node = self.rclGrupoJogadores.selectedNode;   
								self.rclGrupoJogadores.node = node;
								
								local mesas = rrpg.getRooms();
								local bibliotecaAtual = mesas[1].library;

								local function obterNomesRecursivo(bibItem)
									local itensFilhos = bibItem.children;
									local nomes = bibItem.name;

									for i = 1, #itensFilhos, 1 do
										local bibItemFilho = itensFilhos[i];
										local nomesDoFilho = obterNomesRecursivo(bibItemFilho) or "";

										if nomesDoFilho == node.NomeDoPersonagem then
											-- Obter ID do personagem Loan
											local idPersonagem = bibItemFilho;

											-- Solicita acesso à ficha do personagem
											local promise = bibItemFilho:asyncOpenNDB();

											-- Aguarda até que a ficha esteja carregada
											local nodeExterno = await(promise);

											-- Acessa o valor da força do personagem

											if nodeExterno.PA ~= nil or nodeExterno.PA == ""  then
												node.PA = tonumber(nodeExterno.PA) or '0';
												node.PM = tonumber(nodeExterno.PM) or '0';
												node.PF = tonumber(nodeExterno.PF) or '0';
												node.DEF = tonumber(nodeExterno.DEFRED) or '0';
												node.RES = tonumber(nodeExterno.RESRED) or '0';
												node.AC = tonumber(nodeExterno.Acerto) or '0';
												node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
												node.CR = tonumber(nodeExterno.Critical) or '0';
												node.CRM = tonumber(nodeExterno.CMagico) or '0';
												node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
												node.Pers = tonumber(math.floor(nodeExterno.Persistencia) or '0');
												node.Vez = node.Vez or '0';
												node.Atletismo = tonumber(nodeExterno.TAtletismo) or '0';
												node.Sabedoria = tonumber(nodeExterno.TSabedoria) or '0';
												node.Percepcao = tonumber(nodeExterno.TPercepcao) or '0';
												node.Acrobacia = tonumber(nodeExterno.TAcrobacia) or '0';
												node.Vigor = tonumber(nodeExterno.TVigor) or '0';
												node.HPBarMax = tonumber(nodeExterno.HPTotal) or '0';
												node.MPBarMax = tonumber(nodeExterno.MPTotal) or '0';
												node.HPBar = tonumber(nodeExterno.HPAtual) or '0';
												node.MPBar = tonumber(nodeExterno.MPAtual) or '0';
												node.NomeDoPersonagemVez = node.Vez .. " - " ..  node.NomeDoPersonagem
												node.imagemDoPersonagem = nodeExterno.imagemDoPersonagem
											else
												node.PA = tonumber(nodeExterno.Dano) or '0';
												node.PM = tonumber(nodeExterno.DanoMagico) or '0';
												node.PF = "NPC";
												node.DEF = tonumber(nodeExterno.DefesaPorCent) or '0';
												node.RES = tonumber(nodeExterno.ResistenciaPorCent) or '0';
												node.AC = tonumber(nodeExterno.Acerto) or '0';
												node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
												node.CR = tonumber(nodeExterno.Critical) or '0';
												node.CRM = tonumber(nodeExterno.CriticalMagico) or '0';
												node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
												node.Pers = tonumber(math.floor(nodeExterno.Persistencia) or '0');
												node.Vez = node.Vez or '0';
												node.Atletismo = tonumber(nodeExterno.Atletismo) or '0';
												node.Sabedoria = tonumber(nodeExterno.Sabedoria) or '0';
												node.Percepcao = tonumber(nodeExterno.Percepcao) or '0';
												node.Acrobacia = tonumber(nodeExterno.Acrobacia) or '0';
												node.Vigor = tonumber(nodeExterno.TVigor) or '0';
												node.HPBarMax = tonumber(nodeExterno.HPTotal) or '0';
												node.MPBarMax = tonumber(nodeExterno.MPTotal) or '0';
												node.HPBar = tonumber(nodeExterno.HPAtual) or '0';
												node.MPBar = tonumber(nodeExterno.MPAtual) or '0';
												node.NomeDoPersonagemVez = node.Vez .. " - " ..  nodeExterno.Nome
												node.imagemDoPersonagem = nodeExterno.imgInimigo
											end;
										end
									end
								return nomes								
									
								end

								local nomesDeTodosOsItens = obterNomesRecursivo(bibliotecaAtual);
								
							end;	

							end
						</event>	
					</button>	
					<image align="top" width="64" height="64" src="./imagens/buff.png" margins="{top=5}">
					<button name="btnEffect" opacity="0.0" align="client">
						<event name="onClick">
							local novoForm = GUI.newForm("FrmEffectTeste");
							novoForm:setNodeObject(self.rclGrupoJogadores.selectedNode);
							novoForm:show();
                		</event>
					</button>
					</image>
					

					
				</layout>

				
				
				<layout align="left" width="50" margins="{right=1}" >
					<label align="top" text="Status" width="50" margins="{left=10}"/>
					<label align="top" text="PA:" width="50" margins="{left=10}"/>
					<label align="top" text="PM:" width="50" margins="{left=10}"/>
					<label align="top" text="PF:" width="50" margins="{left=10}"/>
					<label align="top" text="DEF:" width="50" margins="{left=10}"/>
					<label align="top" text="RES:" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" text="AC:" width="50" margins="{left=10}"/>
					<label align="top" text="ACM:" width="50" margins="{left=10}"/>
					<label align="top" text="CR:" width="50" margins="{left=10}"/>
					<label align="top" text="CRM:" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" text="ESQ:" width="50" margins="{left=10}"/>
					<label align="top" text="Pers:" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" text="Vez:" fontColor="green" width="50" margins="{left=10}"/>
				</layout>
				
				<layout align="left" width="50" margins="{right=1}" >
					<label align="top" text="Valor" width="50" margins="{left=10}"/>						
					<label align="top" field="PA" width="50" margins="{left=10}"/>
					<label align="top" field="PM" width="50" margins="{left=10}"/>
					<label align="top" field="PF" width="50" margins="{left=10}"/>
					<label align="top" field="DEF" width="50" margins="{left=10}"/>
					<label align="top" field="RES" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="AC" width="50" margins="{left=10}"/>
					<label align="top" field="ACM" width="50" margins="{left=10}"/>
					<label align="top" field="CR" width="50" margins="{left=10}"/>
					<label align="top" field="CRM" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="ESQ" width="50" margins="{left=10}"/>
					<label align="top" field="Pers" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<edit align="top" field="Vez" fontColor="green" width="50" margins="{left=10}"/>						
				</layout>
				
				<layout align="left" width="50" margins="{right=1}" >	
					<label align="top" text="Efeitos" width="50" margins="{left=10}"/>					
					<label align="top" field="PAEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="PMEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="PFEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="DEFEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="RESEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="ACEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="ACMEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="CREffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="CRMEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="ESQEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="PersEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>					
				</layout>

				<layout align="left" width="50" margins="{right=1}" >		
					<label align="top" text="Total" width="50" margins="{left=10}"/>				
					<label align="top" field="PATotal" width="50" margins="{left=10}"/>
					<label align="top" field="PMTotal" width="50" margins="{left=10}"/>
					<label align="top" field="PFTotal" width="50" margins="{left=10}"/>
					<label align="top" field="DEFTotal" width="50" margins="{left=10}"/>
					<label align="top" field="RESTotal" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="ACTotal" width="50" margins="{left=10}"/>
					<label align="top" field="ACMTotal" width="50" margins="{left=10}"/>
					<label align="top" field="CRTotal" width="50" margins="{left=10}"/>
					<label align="top" field="CRMTotal" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="ESQTotal" width="50" margins="{left=10}"/>
					<label align="top" field="PersTotal" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>					
				</layout>

				<layout align="left" width="75" margins="{right=1}" >		
					<label align="top" text="Vitais" width="75" margins="{left=10}"/>
					<label align="top" text="HPTotal" width="75" margins="{left=10}"/>				
					<label align="top" text="MPTotal" width="75" margins="{left=10}"/>			
				</layout>

				<layout align="left" width="50" margins="{right=1}" >		
					<label align="top" text="Valor" width="50" margins="{left=10}"/>
					<label align="top" field="HPEffectTotals" width="50" margins="{left=10}"/>				
					<label align="top" field="MPEffectTotals" width="50" margins="{left=10}"/>			
				</layout>

				<layout align="left" width="50" margins="{right=1}" >		
					<label align="top" text="Total" width="50" margins="{left=10}"/>
					<label align="top" field="HPTotalTotal" width="50" margins="{left=10}"/>				
					<label align="top" field="MPTotalTotal" width="50" margins="{left=10}"/>			
				</layout>
           
			</rectangle>
	</dataScopeBox>
	
	
				
	
	<label text="Controle de Turnos" left="620" width="150" top="10" fontSize="15"/>

    <!-- Campo para exibir o Turno Atual -->
    <layout left="620" top="40" width="200" height="60">
        <label text="Turno Atual:" align="top" autoSize="true" fontSize="16" fontColor="white"/>
        <edit name="editTurnoAtual" field="TurnoAtualControle" align="top" width="200" height="20" horzTextAlign="center"/>
        <button name="btnTurnoAnterior" text="AnteriorRR" align="left" width="90" height="20" top="40">
			<event name="onClick">										
				AnteriorTurno();	
			</event>
		</button>	
		
        <button name="btnTurnoProximo" text="Próximo" align="right" width="90" height="20" top="40">
			<event name="onClick">										
				ProximoTurno();		
			</event>
		</button>
    </layout>

    <!-- Campo para exibir a Vez Atual -->
    <layout left="620" top="120" width="200" height="60">
        <label text="Vez Atual:" align="top" autoSize="true" fontSize="16" fontColor="white"/>
        <edit name="editVezAtual" field="VezAtualControle" align="top" width="200" height="20" readOnly="true" horzTextAlign="center"/>
        <button name="btnVezAnterior" text="Anterior" align="left" width="90" height="20" top="40">
		<event name="onClick">										
				AnteriorVez();
			</event>
		</button>	
        <button name="btnVezProximo" text="PRÓXIMO" align="right" width="90" height="20" top="40">
		<event name="onClick">										
				ProximaVez();
			</event>
		</button>	
    </layout>

    <!-- Campo para exibir a Ação Atual -->
    <layout left="620" top="200" width="200" height="60">
        <label text="Ação Atual:" align="top" autoSize="true" fontSize="16" fontColor="white"/>
        <edit name="editAcaoAtual" field="AcaoAtual" align="top" width="200" height="20" readOnly="false" horzTextAlign="center"/>
        <button name="btnAcaoAnterior" text="Anterior" align="left" width="90" height="20" top="40">
			<event name="onClick">										
				AnteriorAcao();
			</event>
		</button>
		
        <button name="btnAcaoProximo" text="Próximo" align="right" width="90" height="20" top="40">
			<event name="onClick">										
				ProximaAcao();
			</event>
		</button>
    </layout>
	
	<timer name="TrocadorDeAcao" interval="10000" enabled="false" onTimer="AcaoAtualControlador()"/>
	<timer name="AvisoDeTempo" interval="1000" enabled="false" onTimer="AvisoDeTempoControlador()"/>

	<script>
		local tempoDecorrido = 0
		local tempoTotal = 30
		
		
		
		function AcaoAtualControlador()
			local minhaMesa = Firecast.getRoomOf(sheet)
			local chat = minhaMesa.chat
			acoes = {"Ação De Buff", "Ação de Ataque", "Ação de Defesa"}
			criarEIncrementarLista();
			
			if acoes == nil then
				acoes = sheet.AcaoAtual
			end;
			
			if sheet.VezAtualIndex == nil then
				sheet.VezAtualIndex = 1
			else
				sheet.VezAtualControle = lista[sheet.VezAtualIndex]
			end;
			
			if sheet.VezAtualIndex >= #lista then
				sheet.VezAtualIndex = 1 -- reinicia o player para começar dnv
			end;

			if sheet.AcaoAtualIndex == nil then
				sheet.AcaoAtualIndex = 1  -- Inicializa com a primeira ação
				sheet.AcaoAtualControle = acoes[sheet.AcaoAtualIndex]
				sheet.TurnoAtualControle = (sheet.TurnoAtualControle or 0) + 1
			else
				sheet.AcaoAtualIndex = sheet.AcaoAtualIndex + 1
				if sheet.AcaoAtualIndex > #acoes then
					sheet.AcaoAtualIndex = 1  -- Reinicia o ciclo das ações
					sheet.TurnoAtualControle = (sheet.TurnoAtualControle or 0) + 1
					sheet.VezAtualIndex = sheet.VezAtualIndex + 1
					sheet.AcaoAtualControle = acoes[sheet.AcaoAtualIndex]
					sheet.VezAtualControle = lista[sheet.VezAtualIndex]
				end
			end

			sheet.AcaoAtual = acoes[sheet.AcaoAtualIndex]
			chat:enviarNarracao(sheet.AcaoAtual)

			-- Reiniciar o contador de tempo
			
			self.AvisoDeTempo.interval = 1000  -- Restaurar o intervalo do timer para 1 segundo
			self.AvisoDeTempo.enabled = true  -- Iniciar o timer de aviso de tempo
			AvisoDeTempoControlador()
		end


		function AvisoDeTempoControlador()
			local minhaMesa = Firecast.getRoomOf(sheet)
			local chat = minhaMesa.chat

			-- Incrementar o tempo decorrido
			tempoDecorrido = tempoDecorrido + 1
			local tempoRestante = tempoTotal - tempoDecorrido

			if tempoRestante == 10 then
				chat:enviarNarracao("Faltam " .. tempoRestante .. " segundos para a próxima ação, vez de " .. sheet.VezAtualControle)
			end
			
			if tempoRestante == 5 then
				chat:enviarNarracao("Faltam " .. tempoRestante .. " segundos para a próxima ação, vez de " .. sheet.VezAtualControle)
			end
			
			if tempoRestante == 5 then
				chat:enviarNarracao("Faltam " .. tempoRestante .. " segundos para a próxima ação, vez de " .. sheet.VezAtualControle)
			end
			
			if tempoRestante == 1 then
				-- Enviar mensagem de ação perdida
				chat:enviarNarracao("Você perdeu a ação!")

				-- Reiniciar o contador de tempo
				tempoDecorrido = 0
				self.AvisoDeTempo.interval = 10000  -- Restaurar o intervalo do timer para 10 segundos
				self.AvisoDeTempo.enabled = true  -- Reiniciar o timer de aviso de tempo
			end
		end

		function Aviso1SegundoControlador()
			local minhaMesa = Firecast.getRoomOf(sheet)
			local chat = minhaMesa.chat

			-- Enviar mensagem de ação perdida
			chat:enviarNarracao("Você perdeu a ação!")

			-- Reiniciar o contador de tempo
			tempoDecorrido = 0
			self.AvisoDeTempo.interval = 10000  -- Restaurar o intervalo do timer para 10 segundos
			self.AvisoDeTempo.enabled = true  -- Reiniciar o timer de aviso de tempo
		end
	
	function criarEIncrementarLista()
    if sheet ~= nil then
        local nodesJ = ndb.getChildNodes(sheet.NomeJogador)  -- Obtém todos os nós filhos do campo NomeJogador
        local nodesO = ndb.getChildNodes(sheet.NomeOponentes)  -- Obtém todos os nós filhos do campo NomeOponentes
        
        lista = {}  -- Cria uma nova lista

        -- Itera sobre os nós e adiciona o NomeDoPersonagemVez de cada um à lista
        for _, node in ipairs(nodesJ) do
            if node.NomeDoPersonagemVez then  -- Verifica se o campo NomeDoPersonagemVez existe
                table.insert(lista, node.NomeDoPersonagemVez)  -- Adiciona o valor do campo NomeDoPersonagemVez à lista
            end
        end
        
        -- Itera sobre os nós e adiciona o NomeDoOponenteVez de cada um à lista
        for _, node in ipairs(nodesO) do
            if node.NomeDoOponenteVez then  -- Verifica se o campo NomeDoOponenteVez existe
                table.insert(lista, node.NomeDoOponenteVez)  -- Adiciona o valor do campo NomeDoOponenteVez à lista
            end
        end

        -- Ordena a lista em ordem alfabética
        table.sort(lista)

        -- Concatena todos os itens da lista em uma única string
        local listaStr = ""
        for i, item in ipairs(lista) do
            listaStr = listaStr .. "Item " .. i .. ": " .. tostring(item) .. "\n"
        end

        -- Exibe a lista concatenada em um único showMessage
        sheet.PersonagensEmCombate = listaStr
    else
        showMessage("A 'sheet' não está definida.")
    end

    return lista
	end


			


	</script>
	--- Recordlist do Oponente ---	
	<button top="10" left="830" text="Adicionar Oponentes" width="150" height="30">
		<event name="onClick">				                          
			self.rclGrupoOponentes:append();
		</event>
	</button>
	
	<recordList top="40" left="830" width="600" height="300" name="rclGrupoOponentes"  field="NomeOponentes" templateForm="frmItemOponente"
				selectable="true">                             
		<event name="onSelect">
			if sheet ~= nil then
				ASCPrincipal = sheet
				SelfFichPrincipalASC = self
				RclSelecionadoDaVezO = self.rclGrupoOponentes.selectedNode
				RclSelecionadoO = sheet.NomeEfeitoO
				
			end;

			local node = self.rclGrupoOponentes.selectedNode; 
				
			self.BoxDetalheOponentes.node = node; 

			
			
			self.BoxDetalheOponentes.visible = (node ~= nil);

			
			
				if	self.BoxDetalheOponentes.visible == true then
					local node = self.rclGrupoOponentes.selectedNode;   
					self.rclGrupoOponentes.node = node;
					
					if node.NomeDoOponenteVez ~= nil and node.NomeDoOponenteVez ~= "" then

						local mesas = rrpg.getRooms();
						local bibliotecaAtual = mesas[1].library;

						local function obterNomesRecursivoO(bibItem)
							local itensFilhos = bibItem.children;
							local nomes = bibItem.name;

							for i = 1, #itensFilhos, 1 do
								local bibItemFilho = itensFilhos[i];
								local nomesDoFilho = obterNomesRecursivoO(bibItemFilho) or "";

								if nomesDoFilho == node.NomeDoOponente then
									-- Obter ID do personagem Loan
									local idPersonagem = bibItemFilho;

									-- Solicita acesso à ficha do personagem
									local promise = bibItemFilho:asyncOpenNDB();

									-- Aguarda até que a ficha esteja carregada
									local nodeExterno = await(promise);

									-- Acessa o valor da força do personagem
									
									if nodeExterno.PA ~= nil or nodeExterno.PA == ""  then
										node.PA = tonumber(nodeExterno.PA) or '0';
										node.PM = tonumber(nodeExterno.PM) or '0';
										node.PF = tonumber(nodeExterno.PF) or '0';
										node.DEF = tonumber(nodeExterno.DEFRED) or '0';
										node.RES = tonumber(nodeExterno.RESRED) or '0';
										node.AC = tonumber(nodeExterno.Acerto) or '0';
										node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
										node.CR = tonumber(nodeExterno.Critical) or '0';
										node.CRM = tonumber(nodeExterno.CMagico) or '0';
										node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
										node.Pers = tonumber(nodeExterno.Persistencia) or '0';
										node.Vez = node.Vez or '0';
										node.Atletismo = tonumber(nodeExterno.TAtletismo) or '0';
										node.Sabedoria = tonumber(nodeExterno.TSabedoria) or '0';
										node.Percepcao = tonumber(nodeExterno.TPercepcao) or '0';
										node.Acrobacia = tonumber(nodeExterno.TAcrobacia) or '0';
										node.Vigor = tonumber(nodeExterno.TVigor) or '0';
										node.HPBarMaxO = tonumber(nodeExterno.HPTotal) or '0';
										node.MPBarMaxO = tonumber(nodeExterno.MPTotal) or '0';
										node.HPBarO = tonumber(nodeExterno.HPAtual) or '0';
										node.MPBarO = tonumber(nodeExterno.MPAtual) or '0';
										node.NomeDoOponenteVez = node.Vez .. " - " ..  node.NomeDoOponente
										node.imagemInimigo = nodeExterno.imagemDoPersonagem
									else
										node.PA = tonumber(nodeExterno.Dano) or '0';
										node.PM = tonumber(nodeExterno.DanoMagico) or '0';
										node.PF = "NPC";
										node.DEF = tonumber(nodeExterno.DefesaPorCent) or '0';
										node.RES = tonumber(nodeExterno.ResistenciaPorCent) or '0';
										node.AC = tonumber(nodeExterno.Acerto) or '0';
										node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
										node.CR = tonumber(nodeExterno.Critical) or '0';
										node.CRM = tonumber(nodeExterno.CriticalMagico) or '0';
										node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
										node.Pers = tonumber(math.floor(nodeExterno.Persistencia) or '0');
										node.Vez = node.Vez or '0';
										node.Atletismo = tonumber(nodeExterno.Atletismo) or '0';
										node.Sabedoria = tonumber(nodeExterno.Sabedoria) or '0';
										node.Percepcao = tonumber(nodeExterno.Percepcao) or '0';
										node.Acrobacia = tonumber(nodeExterno.Acrobacia) or '0';
										node.Vigor = tonumber(nodeExterno.TVigor) or '0';
										node.HPBarMaxO = tonumber(nodeExterno.HPTotal) or '0';
										node.MPBarMaxO = tonumber(nodeExterno.MPTotal) or '0';
										node.HPBarO = tonumber(nodeExterno.HPAtual) or '0';
										node.MPBarO = tonumber(nodeExterno.MPAtual) or '0';
										node.NomeDoOponenteVez = node.Vez .. " - " ..  nodeExterno.Nome
										node.imagemInimigo = nodeExterno.imgInimigo
									end;
								end
							end
						return nomes
						end
						local nomesDeTodosOsItens = obterNomesRecursivoO(bibliotecaAtual);
					end;
				end;
				
				self.rclGrupoOponentes:sort();
		</event>
		<event name="onCompare">
			return utils.compareStringPtBr(nodeA.Vez, nodeB.Vez);
        </event>
	</recordList>
	
	<dataScopeBox top="350" left="830" name="BoxDetalheOponentes"  visible="false" height="350"  width="600">
		<!-- Faça um layout "bonito" para sua caixa de detalhes =). Utilize a propriedade "field" nas tags aqui dentro   -->      
		<rectangle align="client" color="black" xradius="10" yradius="10"
				   height="180" padding="{top=3, left=3, right=3, bottom=3}">
			<layout align="left" width="150" margins="{right=2}">
				<image align="top" width="100" margins="{top=1}" field="imagemInimigo" src="http://fc03.deviantart.net/fs70/i/2011/234/5/4/dragon_aspects_by_rattlesnakedefender-d47ii5y.jpg"/>
				<label align="top" text="Jogador:" horzTextAlign="center" width="150" margins="{top=1}"/>
				<edit align="top" width="150" field="NomeDoOponente" margins="{top=1}"/>
				<button align="top" width="150" text="Sincronizar" margins="{right=1}"	>
					<event name="onClick">										
						if	self.BoxDetalheOponentes.visible == true then
							local node = self.rclGrupoOponentes.selectedNode;   
							self.rclGrupoOponentes.node = node;
							
							local mesas = rrpg.getRooms();
							local bibliotecaAtual = mesas[1].library;

							local function obterNomesRecursivoO(bibItem)
								local itensFilhos = bibItem.children;
								local nomes = bibItem.name;

								for i = 1, #itensFilhos, 1 do
									local bibItemFilho = itensFilhos[i];
									local nomesDoFilho = obterNomesRecursivoO(bibItemFilho) or "";

									if nomesDoFilho == node.NomeDoOponente then
										-- Obter ID do personagem Loan
										local idPersonagem = bibItemFilho;

										-- Solicita acesso à ficha do personagem
										local promise = bibItemFilho:asyncOpenNDB();

										-- Aguarda até que a ficha esteja carregada
										local nodeExterno = await(promise);

										-- Acessa o valor da força do personagem
										
										if nodeExterno.PA ~= nil or nodeExterno.PA == ""  then
											node.PA = tonumber(nodeExterno.PA) or '0';
											node.PM = tonumber(nodeExterno.PM) or '0';
											node.PF = tonumber(nodeExterno.PF) or '0';
											node.DEF = tonumber(nodeExterno.DEFRED) or '0';
											node.RES = tonumber(nodeExterno.RESRED) or '0';
											node.AC = tonumber(nodeExterno.Acerto) or '0';
											node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
											node.CR = tonumber(nodeExterno.Critical) or '0';
											node.CRM = tonumber(nodeExterno.CMagico) or '0';
											node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
											node.Pers = tonumber(nodeExterno.Persistencia) or '0';
											node.Vez = node.Vez or '0';
											node.Atletismo = tonumber(nodeExterno.TAtletismo) or '0';
											node.Sabedoria = tonumber(nodeExterno.TSabedoria) or '0';
											node.Percepcao = tonumber(nodeExterno.TPercepcao) or '0';
											node.Acrobacia = tonumber(nodeExterno.TAcrobacia) or '0';
											node.Vigor = tonumber(nodeExterno.TVigor) or '0';
											node.HPBarMaxO = tonumber(nodeExterno.HPTotal) or '0';
											node.MPBarMaxO = tonumber(nodeExterno.MPTotal) or '0';
											node.HPBarO = tonumber(nodeExterno.HPAtual) or '0';
											node.MPBarO = tonumber(nodeExterno.MPAtual) or '0';
											node.NomeDoOponenteVez = node.Vez .. " - " ..  node.NomeDoOponente
											node.imagemInimigo = nodeExterno.imagemDoPersonagem

											node.PAEffectTotal = 0;
											node.PMEffectTotal = 0;
											node.PFEffectTotal = 0;
											node.DEFEffectTotal = 0;
											node.RESEffectTotal = 0;
											node.ACEffectTotal = 0;
											node.ACMEffectTotal = 0;
											node.CREffectTotal = 0;
											node.CRMEffectTotal = 0;
											node.ESQEffectTotal = 0;
											node.PersEffectTotal = 0;
											node.HPEffectTotals = 0;
											node.MPEffectTotals = 0;
											node.DanoEffect = 0
											node.CustoEffect = 0 
											node.CuraEffect = 0  
											node.RegMPEffect = 0 
										else
											node.PA = tonumber(nodeExterno.Dano) or '0';
											node.PM = tonumber(nodeExterno.DanoMagico) or '0';
											node.PF = "NPC";
											node.DEF = tonumber(nodeExterno.DefesaPorCent) or '0';
											node.RES = tonumber(nodeExterno.ResistenciaPorCent) or '0';
											node.AC = tonumber(nodeExterno.Acerto) or '0';
											node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
											node.CR = tonumber(nodeExterno.Critical) or '0';
											node.CRM = tonumber(nodeExterno.CriticalMagico) or '0';
											node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
											node.Pers = tonumber(math.floor(nodeExterno.Persistencia) or '0');
											node.Vez = node.Vez or '0';
											node.Atletismo = tonumber(nodeExterno.Atletismo) or '0';
											node.Sabedoria = tonumber(nodeExterno.Sabedoria) or '0';
											node.Percepcao = tonumber(nodeExterno.Percepcao) or '0';
											node.Acrobacia = tonumber(nodeExterno.Acrobacia) or '0';
											node.Vigor = tonumber(nodeExterno.TVigor) or '0';
											node.HPBarMaxO = tonumber(nodeExterno.HPTotal) or '0';
											node.MPBarMaxO = tonumber(nodeExterno.MPTotal) or '0';
											node.HPBarO = tonumber(nodeExterno.HPAtual) or '0';
											node.MPBarO = tonumber(nodeExterno.MPAtual) or '0';
											node.NomeDoOponenteVez = node.Vez .. " - " ..  nodeExterno.Nome
											node.imagemInimigo = nodeExterno.imgInimigo

											node.PAEffectTotal = 0;
											node.PMEffectTotal = 0;
											node.PFEffectTotal = 0;
											node.DEFEffectTotal = 0;
											node.RESEffectTotal = 0;
											node.ACEffectTotal = 0;
											node.ACMEffectTotal = 0;
											node.CREffectTotal = 0;
											node.CRMEffectTotal = 0;
											node.ESQEffectTotal = 0;
											node.PersEffectTotal = 0;
											node.HPEffectTotals = 0;
											node.MPEffectTotals = 0;
											node.DanoEffect = 0
											node.CustoEffect = 0 
											node.CuraEffect = 0  
											node.RegMPEffect = 0 
										end;
									end
								end
							return nomes
							end
							local nomesDeTodosOsItens = obterNomesRecursivoO(bibliotecaAtual);
						end;	
					</event>
				</button>		

				-- tem que fazer essa parte adicionar o edit novo
				-- tem que adicionar o findcontrolbyname
				-- adicionar a regra de edtHP de objeto
				-- adicionar a regra que quem tem nome é o resolve 
				-- lembrar que a maioria das sheets aqui tem o O no final da variavel
					
				<progressBar align="top" width="150" color="red" field="HPBarO" fieldMax="HPBarMaxO" margins="{top=1}">
				<edit name="gambiHPO" align="left" transparent="true" hitTest="false" horzTextAlign="center" field="HPBarO"/>
				<edit name="edtHPAtualO" visible="false" align="left" canFocus="false" transparent="true" hitTest="false" horzTextAlign="center" field="HPBarResolveO"/>
				<label align="client" horzTextAlign="center" text="/"/>
				<label align="right" horzTextAlign="center" field="HPBarMaxO"/>
				</progressBar>
				<progressBar align="top" width="150" color="blue" field="MPBarO" fieldMax="MPBarMaxO" margins="{top=1}">	
				<edit name="gambiMPO" align="left" transparent="true" hitTest="false" horzTextAlign="center" field="MPBarO"/>
				<edit name="edtMPAtualO" visible="false" align="left" canFocus="false" transparent="true" hitTest="false" horzTextAlign="center" field="MPBarResolveO"/>
				<label align="right" horzTextAlign="center" text="---/---"/>
				<label align="right" horzTextAlign="center" field="MPBarMaxO"/>						
				</progressBar>
				<button name="btnEditStatusI" align="top" fontColor="white" width="150" text="Editar ✎" margins="{top=1}">
						<event name="onClick">
							
							

							-- Obtém o nó selecionado do recordList
							local node = self.rclGrupoOponentes.selectedNode;
							if not node then
								showMessage("Nenhum item foi selecionado!");
								return;
							end

							-- Localiza o botão dentro do contexto do item selecionado
							local btn = self:findControlByName("btnEditStatusI");
							local gambiHP = self:findControlByName("gambiHPO");
							local edtHP = self:findControlByName("edtHPAtualO");
							local gambiMP = self:findControlByName("gambiMPO");
							local edtMP = self:findControlByName("edtMPAtualO");
							if not btn then
								showMessage("Botão não encontrado no item selecionado!");
								return;
							end

							-- Lógica para alternar entre editar e aplicar
							if btn.text == "Editar ✎" then
								btn.fontColor = "red";
								btn.text = "Aplicar 💾";
								edtHP.transparent = false
								edtHP.hitTest = true
								edtHP.visible = true;
								edtHP.canFocus = true;
								gambiHP.visible = false;

								edtMP.transparent = false
								edtMP.hitTest = true
								edtMP.visible = true;
								edtMP.canFocus = true;
								gambiMP.visible = false;

								if self.BoxDetalheOponentes.visible == true then
									local node = self.rclGrupoOponentes.selectedNode;   
									self.rclGrupoOponentes.node = node;
									
									local mesas = rrpg.getRooms();
									local bibliotecaAtual = mesas[1].library;

									local function obterNomesRecursivo(bibItem)
										local itensFilhos = bibItem.children;
										local nomes = bibItem.name;

										for i = 1, #itensFilhos, 1 do
											local bibItemFilho = itensFilhos[i];
											local nomesDoFilho = obterNomesRecursivo(bibItemFilho) or "";

											if nomesDoFilho == node.NomeDoOponente then
												-- Obter ID do personagem Loan
												local idPersonagem = bibItemFilho;

												-- Solicita acesso à ficha do personagem
												local promise = bibItemFilho:asyncOpenNDB();

												-- Aguarda até que a ficha esteja carregada
												local nodeExterno = await(promise);

												-- Acessa o valor da força do personagem
												node.HPBarMaxO = tonumber(nodeExterno.HPTotal);
												node.MPBarMaxO = tonumber(nodeExterno.MPTotal);
												node.HPBarO = tonumber(nodeExterno.HPAtual);
												node.MPBarO = tonumber(nodeExterno.MPAtual);
											end
										end
										return nomes;
									end

									-- Certifique-se de chamar a função, se necessário
									obterNomesRecursivo(bibliotecaAtual);
								end

							else
								btn.fontColor = "white";
								btn.text = "Editar ✎";
								edtHP.transparent = true
								edtHP.hitTest = false
								edtHP.visible = false;
								gambiHP.visible = true;

								edtMP.transparent = true
								edtMP.hitTest = false
								edtMP.visible = false;
								gambiMP.visible = true;

								if	self.BoxDetalheOponentes.visible == true then
								local node = self.rclGrupoOponentes.selectedNode;   
								self.rclGrupoOponentes.node = node;
								
								local mesas = rrpg.getRooms();
								local bibliotecaAtual = mesas[1].library;

								local function obterNomesRecursivo(bibItem)
									local itensFilhos = bibItem.children;
									local nomes = bibItem.name;

									for i = 1, #itensFilhos, 1 do
										local bibItemFilho = itensFilhos[i];
										local nomesDoFilho = obterNomesRecursivo(bibItemFilho) or "";

										if nomesDoFilho == node.NomeDoOponente then
											-- Obter ID do personagem Loan
											local idPersonagem = bibItemFilho;

											-- Solicita acesso à ficha do personagem
											local promise = bibItemFilho:asyncOpenNDB();

											-- Aguarda até que a ficha esteja carregada
											local nodeExterno = await(promise);

											-- Acessa o valor da força do personagem
											
											if node.HPBarResolveO ~= 0 and node.HPBarResolveO ~= nil and node.HPBarResolveO ~= "" then 
												local hpBarInput = tostring(node.HPBarResolveO) -- Converte o valor para string, caso não seja
												if hpBarInput:match("^%+%d+$") then
													-- Se começar com "+", soma ao valor existente
													local valor = tonumber(hpBarInput:sub(2)) -- Remove o "+" e converte para número
													nodeExterno.HPAtual = (tonumber(node.HPBarO) or 0) + valor
												elseif hpBarInput:match("^%-%d+$") then
													-- Se começar com "-", subtrai do valor existente
													local valor = tonumber(hpBarInput:sub(2)) -- Remove o "-" e converte para número
													nodeExterno.HPAtual = (tonumber(node.HPBarO) or 0) - valor
												else
													-- Se não tiver "+" ou "-", aplica o valor diretamente
													nodeExterno.HPAtual = tonumber(hpBarInput)
												end
											end;

											if node.MPBarResolveO ~= 0 and node.MPBarResolveO ~= nil and node.MPBarResolveO ~= "" then 
												-- Ajuste para MPAtual
												local mpBarInput = tostring(node.MPBarResolveO) -- Converte o valor para string, caso não seja
												if mpBarInput:match("^%+%d+$") then
													-- Se começar com "+", soma ao valor existente
													local valor = tonumber(mpBarInput:sub(2)) -- Remove o "+" e converte para número
													nodeExterno.MPAtual = (tonumber(node.MPBarO) or 0) + valor
												elseif mpBarInput:match("^%-%d+$") then
													-- Se começar com "-", subtrai do valor existente
													local valor = tonumber(mpBarInput:sub(2)) -- Remove o "-" e converte para número
													nodeExterno.MPAtual = (tonumber(node.MPBarO) or 0) - valor
												else
													-- Se não tiver "+" ou "-", aplica o valor diretamente
													nodeExterno.MPAtual = tonumber(mpBarInput)
												end
											end;

										end
									end
								return nomes								
									
								end

								local nomesDeTodosOsItens = obterNomesRecursivo(bibliotecaAtual);
								
							end;	

							if	self.BoxDetalheOponentes.visible == true then
								local node = self.rclGrupoOponentes.selectedNode;   
								self.rclGrupoOponentes.node = node;
								
								local mesas = rrpg.getRooms();
								local bibliotecaAtual = mesas[1].library;

								local function obterNomesRecursivo(bibItem)
									local itensFilhos = bibItem.children;
									local nomes = bibItem.name;

									for i = 1, #itensFilhos, 1 do
										local bibItemFilho = itensFilhos[i];
										local nomesDoFilho = obterNomesRecursivo(bibItemFilho) or "";

										if nomesDoFilho == node.NomeDoOponente then
											-- Obter ID do personagem Loan
											local idPersonagem = bibItemFilho;

											-- Solicita acesso à ficha do personagem
											local promise = bibItemFilho:asyncOpenNDB();

											-- Aguarda até que a ficha esteja carregada
											local nodeExterno = await(promise);

											-- Acessa o valor da força do personagem

											if nodeExterno.PA ~= nil or nodeExterno.PA == ""  then
												node.PA = tonumber(nodeExterno.PA) or '0';
												node.PM = tonumber(nodeExterno.PM) or '0';
												node.PF = tonumber(nodeExterno.PF) or '0';
												node.DEF = tonumber(nodeExterno.DEFRED) or '0';
												node.RES = tonumber(nodeExterno.RESRED) or '0';
												node.AC = tonumber(nodeExterno.Acerto) or '0';
												node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
												node.CR = tonumber(nodeExterno.Critical) or '0';
												node.CRM = tonumber(nodeExterno.CMagico) or '0';
												node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
												node.Pers = tonumber(math.floor(nodeExterno.Persistencia) or '0');
												node.Vez = node.Vez or '0';
												node.Atletismo = tonumber(nodeExterno.TAtletismo) or '0';
												node.Sabedoria = tonumber(nodeExterno.TSabedoria) or '0';
												node.Percepcao = tonumber(nodeExterno.TPercepcao) or '0';
												node.Acrobacia = tonumber(nodeExterno.TAcrobacia) or '0';
												node.Vigor = tonumber(nodeExterno.TVigor) or '0';
												node.HPBarMaxO = tonumber(nodeExterno.HPTotal) or '0';
												node.MPBarMaxO = tonumber(nodeExterno.MPTotal) or '0';
												node.HPBarO = tonumber(nodeExterno.HPAtual) or '0';
												node.MPBarO = tonumber(nodeExterno.MPAtual) or '0';
												node.NomeDoPersonagemVez = node.Vez .. " - " ..  node.NomeDoOponente
												node.imagemDoPersonagem = nodeExterno.imagemDoPersonagem
											else
												node.PA = tonumber(nodeExterno.Dano) or '0';
												node.PM = tonumber(nodeExterno.DanoMagico) or '0';
												node.PF = "NPC";
												node.DEF = tonumber(nodeExterno.DefesaPorCent) or '0';
												node.RES = tonumber(nodeExterno.ResistenciaPorCent) or '0';
												node.AC = tonumber(nodeExterno.Acerto) or '0';
												node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
												node.CR = tonumber(nodeExterno.Critical) or '0';
												node.CRM = tonumber(nodeExterno.CriticalMagico) or '0';
												node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
												node.Pers = tonumber(math.floor(nodeExterno.Persistencia) or '0');
												node.Vez = node.Vez or '0';
												node.Atletismo = tonumber(nodeExterno.Atletismo) or '0';
												node.Sabedoria = tonumber(nodeExterno.Sabedoria) or '0';
												node.Percepcao = tonumber(nodeExterno.Percepcao) or '0';
												node.Acrobacia = tonumber(nodeExterno.Acrobacia) or '0';
												node.Vigor = tonumber(nodeExterno.TVigor) or '0';
												node.HPBarMaxO = tonumber(nodeExterno.HPTotal) or '0';
												node.MPBarMaxO = tonumber(nodeExterno.MPTotal) or '0';
												node.HPBarO = tonumber(nodeExterno.HPAtual) or '0';
												node.MPBarO = tonumber(nodeExterno.MPAtual) or '0';
												node.NomeDoPersonagemVez = node.Vez .. " - " ..  nodeExterno.Nome
												node.imagemDoPersonagem = nodeExterno.imgInimigo
											end;
										end
									end
								return nomes								
									
								end

								local nomesDeTodosOsItens = obterNomesRecursivo(bibliotecaAtual);
								
							end;	

							end
						</event>	
					</button>	
					<image align="top" width="64" height="64" src="./imagens/buff.png" margins="{top=5}">
					<button name="btnEffectO" opacity="0.0" align="client">
						<event name="onClick">
							local novoForm = GUI.newForm("FrmEffectTesteO");
							novoForm:setNodeObject(self.rclGrupoOponentes.selectedNode);
							novoForm:show();
                		</event>
					</button>
					</image>
				
			</layout>
			<layout align="left" width="50" margins="{right=1}" >
					<label align="top" text="Status" width="50" margins="{left=10}"/>
					<label align="top" text="PA:" width="50" margins="{left=10}"/>
					<label align="top" text="PM:" width="50" margins="{left=10}"/>
					<label align="top" text="PF:" width="50" margins="{left=10}"/>
					<label align="top" text="DEF:" width="50" margins="{left=10}"/>
					<label align="top" text="RES:" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" text="AC:" width="50" margins="{left=10}"/>
					<label align="top" text="ACM:" width="50" margins="{left=10}"/>
					<label align="top" text="CR:" width="50" margins="{left=10}"/>
					<label align="top" text="CRM:" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" text="ESQ:" width="50" margins="{left=10}"/>
					<label align="top" text="Pers:" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" text="Vez:" fontColor="green" width="50" margins="{left=10}"/>
				</layout>
				
				<layout align="left" width="50" margins="{right=1}" >
					<label align="top" text="Valor" width="50" margins="{left=10}"/>						
					<label align="top" field="PA" width="50" margins="{left=10}"/>
					<label align="top" field="PM" width="50" margins="{left=10}"/>
					<label align="top" field="PF" width="50" margins="{left=10}"/>
					<label align="top" field="DEF" width="50" margins="{left=10}"/>
					<label align="top" field="RES" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="AC" width="50" margins="{left=10}"/>
					<label align="top" field="ACM" width="50" margins="{left=10}"/>
					<label align="top" field="CR" width="50" margins="{left=10}"/>
					<label align="top" field="CRM" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="ESQ" width="50" margins="{left=10}"/>
					<label align="top" field="Pers" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<edit align="top" field="Vez" fontColor="green" width="50" margins="{left=10}"/>	
					
					
					
				</layout>
				
				<layout align="left" width="50" margins="{right=1}" >	
					<label align="top" text="Efeitos" width="50" margins="{left=10}"/>					
					<label align="top" field="PAEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="PMEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="PFEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="DEFEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="RESEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="ACEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="ACMEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="CREffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="CRMEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="ESQEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" field="PersEffectTotal" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>					
				</layout>

				<layout align="left" width="50" margins="{right=1}" >		
					<label align="top" text="Total" width="50" margins="{left=10}"/>				
					<label align="top" field="PATotal" width="50" margins="{left=10}"/>
					<label align="top" field="PMTotal" width="50" margins="{left=10}"/>
					<label align="top" field="PFTotal" width="50" margins="{left=10}"/>
					<label align="top" field="DEFTotal" width="50" margins="{left=10}"/>
					<label align="top" field="RESTotal" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="ACTotal" width="50" margins="{left=10}"/>
					<label align="top" field="ACMTotal" width="50" margins="{left=10}"/>
					<label align="top" field="CRTotal" width="50" margins="{left=10}"/>
					<label align="top" field="CRMTotal" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>
					<label align="top" field="ESQTotal" width="50" margins="{left=10}"/>
					<label align="top" field="PersTotal" width="50" margins="{left=10}"/>
					<label align="top" text="---" width="50" margins="{left=10}"/>					
				</layout>

				<layout align="left" width="75" margins="{right=1}" >		
					<label align="top" text="Vitais" width="75" margins="{left=10}"/>
					<label align="top" text="HPTotal" width="75" margins="{left=10}"/>				
					<label align="top" text="MPTotal" width="75" margins="{left=10}"/>			
				</layout>

				<layout align="left" width="50" margins="{right=1}" >		
					<label align="top" text="Valor" width="50" margins="{left=10}"/>
					<label align="top" field="HPEffectTotals" width="50" margins="{left=10}"/>				
					<label align="top" field="MPEffectTotals" width="50" margins="{left=10}"/>			
				</layout>

				<layout align="left" width="50" margins="{right=1}" >		
					<label align="top" text="Total" width="50" margins="{left=10}"/>
					<label align="top" field="HPTotalTotal" width="50" margins="{left=10}"/>				
					<label align="top" field="MPTotalTotal" width="50" margins="{left=10}"/>			
				</layout>
			----LZADA----		 
		</rectangle>
	</dataScopeBox>

	<textEditor name="LogCombat" left="615" top="350" width="210" height="350" field="FieldLogCombat"/>
	<button name="btnResetLog" left="615" width="210" top="710" text="Reset Log" onClick="ResetaLog()"/>
	
	<dataLink fields="{'ACAOTURNO'}">
		<event name="onChange">

								local personagem = rrpg.getPersonagemDe(sheet); 

								          
											
								if (personagem ~= nil) then
									local mesa = personagem.mesa;
									if (mesa.meuJogador.id) == 51345 then

										
										if sheet.UsuarioEnvio ~= nil and sheet.EscolheTipoAtaque ~= "Cura" and sheet.EscolheTipoAtaque ~= "Cura Fixa" then
											UsuarioEnvio = AchaQuemEnviou(sheet.UsuarioEnvio, sheet.NomeJogador, sheet.NomeOponentes)
										end;

										if sheet.AlvoRecebido ~= nil and sheet.EscolheTipoAtaque ~= "Cura" and sheet.EscolheTipoAtaque ~= "Cura Fixa" then
											AlvoEnviou = VerificaAlvo(sheet.AlvoRecebido, sheet.NomeJogador, sheet.NomeOponentes)
										end;
																			
												
										local mesaDoPersonagem = Firecast.getRoomOf(sheet); 

										if sheet.TipoRecebido == "Cura" or sheet.TipoRecebido == "Cura Fixa" then
											HabilidadeCura(nil)
										end;          

											if sheet.AlvoRecebido ~= nil and sheet.AlvoRecebido ~= "" then
												-- Acessa o RecordList do grupo de jogadores
												local nodes = ndb.getChildNodes(sheet.NomeJogador) -- Substitua pelo campo correto

												for _, node in ipairs(nodes) do
													if node.NomeDoPersonagemVez == sheet.AlvoRecebido then
														-- Seleciona automaticamente o item no RecordList
														self.rclGrupoJogadores.selectedNode = node
														break -- Encerra o loop ao encontrar o item correspondente
													end
												end
											end

											if sheet.AlvoRecebido ~= nil and sheet.AlvoRecebido ~= "" then
												-- Acessa o RecordList do grupo de jogadores
												local nodes = ndb.getChildNodes(sheet.NomeOponentes) -- Substitua pelo campo correto

												for _, node in ipairs(nodes) do
													if node.NomeDoOponenteVez == sheet.AlvoRecebido then
														-- Seleciona automaticamente o item no RecordList
														self.rclGrupoOponentes.selectedNode = node
														break -- Encerra o loop ao encontrar o item correspondente
													end
												end
											end

											

											if sheet.GrupoRecebido == "1" then
												local nodes = ndb.getChildNodes(sheet.NomeOponentes)
													
												for _, node in ipairs(nodes) do
													if node.NomeDoOponenteVez == sheet.AlvoRecebido then						
														
														--AQUI--
														if	self.BoxDetalheOponentes.visible == true then
															local node = self.rclGrupoOponentes.selectedNode;   
															self.rclGrupoOponentes.node = node;
															
															local mesas = rrpg.getRooms();
															local bibliotecaAtual = mesas[1].library;

															local function obterNomesRecursivoI(bibItem)
																local itensFilhos = bibItem.children;
																local nomes = bibItem.name;								

																for i = 1, #itensFilhos, 1 do
																	local bibItemFilho = itensFilhos[i];
																	local nomesDoFilho = obterNomesRecursivoI(bibItemFilho) or "";									

																	if nomesDoFilho == node.NomeDoOponente then
																		-- Obter ID do personagem Loan
																		local idPersonagem = bibItemFilho;
																		

																		-- Solicita acesso à ficha do personagem
																		local promise = bibItemFilho:asyncOpenNDB();
																		
																		-- Aguarda até que a ficha esteja carregada
																		local nodeExterno = await(promise);

																		-- Sincronizando

																		if nodeExterno.PA ~= nil or nodeExterno.PA == ""  then
																			node.PA = tonumber(nodeExterno.PA) or '0';
																			node.PM = tonumber(nodeExterno.PM) or '0';
																			node.PF = tonumber(nodeExterno.PF) or '0';
																			node.DEF = tonumber(nodeExterno.DEFRED) or '0';
																			node.RES = tonumber(nodeExterno.RESRED) or '0';
																			node.AC = tonumber(nodeExterno.Acerto) or '0';
																			node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
																			node.CR = tonumber(nodeExterno.Critical) or '0';
																			node.CRM = tonumber(nodeExterno.CMagico) or '0';
																			node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
																			node.Pers = math.floor(tonumber(nodeExterno.Persistencia)) or '0';
																			node.Vez = node.Vez or '0';
																			node.Atletismo = tonumber(nodeExterno.TAtletismo) or '0';
																			node.Sabedoria = tonumber(nodeExterno.TSabedoria) or '0';
																			node.Percepcao = tonumber(nodeExterno.TPercepcao) or '0';
																			node.Acrobacia = tonumber(nodeExterno.TAcrobacia) or '0';
																			node.Vigor = tonumber(nodeExterno.TVigor) or '0';
																			node.HPBarMaxO = tonumber(nodeExterno.HPTotal) or '0';
																			node.MPBarMaxO = math.floor(tonumber(nodeExterno.MPTotal)) or '0';
																			node.HPBarO = tonumber(nodeExterno.HPAtual) or '0';
																			node.MPBarO = math.floor(tonumber(nodeExterno.MPAtual)) or '0';
																			node.NomeDoPersonagemVez = node.Vez .. " - " ..  node.NomeDoOponente
																			node.imagemDoPersonagem = nodeExterno.imagemDoPersonagem
																		else
																			node.PA = tonumber(nodeExterno.Dano) or '0';
																			node.PM = tonumber(nodeExterno.DanoMagico) or '0';
																			node.PF = "NPC";
																			node.DEF = tonumber(nodeExterno.DefesaPorCent) or '0';
																			node.RES = tonumber(nodeExterno.ResistenciaPorCent) or '0';
																			node.AC = tonumber(nodeExterno.Acerto) or '0';
																			node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
																			node.CR = tonumber(nodeExterno.Critical) or '0';
																			node.CRM = tonumber(nodeExterno.CriticalMagico) or '0';
																			node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
																			node.Pers = math.floor(tonumber(nodeExterno.Persistencia)) or '0';
																			node.Vez = node.Vez or '0';
																			node.Atletismo = tonumber(nodeExterno.Atletismo) or '0';
																			node.Sabedoria = tonumber(nodeExterno.Sabedoria) or '0';
																			node.Percepcao = tonumber(nodeExterno.Percepcao) or '0';
																			node.Acrobacia = tonumber(nodeExterno.Acrobacia) or '0';
																			node.Vigor = tonumber(nodeExterno.TVigor) or '0';
																			node.HPBarMaxO = tonumber(nodeExterno.HPTotal) or '0';
																			node.MPBarMaxO = math.floor(tonumber(nodeExterno.MPTotal)) or '0';
																			node.HPBarO = tonumber(nodeExterno.HPAtual) or '0';
																			node.MPBarO = math.floor(tonumber(nodeExterno.MPAtual)) or '0';
																			node.NomeDoPersonagemVez = node.Vez .. " - " ..  nodeExterno.Nome
																			node.imagemDoPersonagem = nodeExterno.imgInimigo
																		end;
		
																		if sheet.EscolheTipoAtaque == 'PA' or sheet.EscolheTipoAtaque == 'DF' or sheet.EscolheTipoAtaque == 'PA+PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + UsuarioEnvio.PAEffectTotal) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'M/PA' or sheet.EscolheTipoAtaque == 'M/DF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PAEffectTotal / 2)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'PA+M/PA' or sheet.EscolheTipoAtaque == 'DF' or sheet.EscolheTipoAtaque == 'PA+PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + UsuarioEnvio.PAEffectTotal) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'DF+M/DF' or sheet.EscolheTipoAtaque == 'DF' or sheet.EscolheTipoAtaque == 'PA+PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + UsuarioEnvio.PAEffectTotal) or 0)
																		end;

																		if sheet.EscolheTipoAtaque == 'PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + UsuarioEnvio.PFEffectTotal) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'M/PF' or sheet.EscolheTipoAtaque == 'M/DF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PFEffectTotal / 2)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'PF+M/PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + UsuarioEnvio.PFEffectTotal) or 0)
																		end;

																		if sheet.EscolheTipoAtaque == 'PM' or sheet.EscolheTipoAtaque == 'DM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PMEffectTotal or 0)) or 0)
																		end;	
																		if sheet.EscolheTipoAtaque == 'PM+M/PM' or sheet.EscolheTipoAtaque == 'DM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PMEffectTotal or 0)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'DM+M/DM' or sheet.EscolheTipoAtaque == 'DM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PMEffectTotal or 0)) or 0)
																		end;	

																		if sheet.EscolheTipoAtaque == 'PA+PM' or sheet.EscolheTipoAtaque == 'DF+DM' or sheet.EscolheTipoAtaque == 'PF+PM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PMEffectTotal or 0) + (UsuarioEnvio.PFEffectTotal or 0) ) or 0)
																		end;
																		

																		if sheet.EscolheTipoAtaque == 'M/PA+PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PAEffectTotal / 2) + (UsuarioEnvio.PFEffectTotal)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'M/PF+PA' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PFEffectTotal / 2) + (UsuarioEnvio.PAEffectTotal)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'M/PF+M/PA' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PFEffectTotal / 2) + (UsuarioEnvio.PAEffectTotal / 2)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'M/PM' or sheet.EscolheTipoAtaque == 'M/DM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + UsuarioEnvio.PMEffectTotal / 2) or 0)
																		end;								

																		
																		if sheet.EscolheTipoAtaque == 'M/PM+PA' or sheet.EscolheTipoAtaque == 'M/DM+DF' or sheet.EscolheTipoAtaque == 'M/PM+PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + ((UsuarioEnvio.PMEffectTotal / 2) or 0) + (UsuarioEnvio.PAEffectTotal or 0)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'M/DF+DM' or sheet.EscolheTipoAtaque == 'M/PA+PM' or sheet.EscolheTipoAtaque == 'M/PF+PM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + ((UsuarioEnvio.PAEffectTotal / 2) or 0) + (UsuarioEnvio.PMEffectTotal or 0)) or 0)
																		end;


																		if sheet.EscolheTipoAtaque == 'M/PA+M/PM' or sheet.EscolheTipoAtaque == 'M/PF+M/PM' or sheet.EscolheTipoAtaque == 'M/DF+M/DM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + ((UsuarioEnvio.PAEffectTotal / 2) or 0) + (UsuarioEnvio.PMEffectTotal /2) or 0) or 0)
																		end;

																		if sheet.EscolheTipoAtaque == 'REAL PA' or sheet.EscolheTipoAtaque == 'REAL PF' or sheet.EscolheTipoAtaque == 'REAL PM' or sheet.EscolheTipoAtaque == 'REAL DM' or sheet.EscolheTipoAtaque == 'REAL DF' or sheet.EscolheTipoAtaque == 'Real' then
																			sheet.RedutivelAtual = 0
																		end;

																		if sheet.EscolheTipoAtaque == 'Buff' or sheet.EscolheTipoAtaque == 'Defensiva' then
																			sheet.RedutivelAtual = 0
																		end;	

																		if sheet.EscolheTipoAtaque == 'Efeito' then
																			sheet.RedutivelAtual = 0
																		end;		

																		if sheet.EscolheTipoAtaque == 'M/PA+M/PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PAEffectTotal / 2) + (UsuarioEnvio.PFEffectTotal / 2)) or 0)
																		end;					
																		
																		if sheet.UsuarioEnvio ~= nil then
																			DecideOqueRolar(
																			UsuarioEnvio, 
																			AlvoEnviou, 
																			sheet.TipoRecebido, 
																			sheet.UsuarioEnviouCusto,
																			self.BoxDetalheJogadores, 
																			self.BoxDetalheOponentes,
																			function()
																				-- Este código só executa DEPOIS que DecideOqueRolar terminar
																				if sheet.AcertouPergunta == "True" then
																					mesaDoPersonagem.chat:enviarMensagem("[§K1]---ACERTOU O ALVO---")
																					local danoFinal = (sheet.DanoRecebido or 0) * (1 - (tonumber(sheet.RedutivelAtual or 0) / 100))
																					sheet.DanoProLog = danoFinal
																					node.HPBarO = tonumber(math.floor(node.HPBarO - danoFinal))
																					nodeExterno.HPAtual = tonumber(node.HPBarO) or '0'
																					if sheet.FoiCriticalLog == true then																			
																						atualizarLogCritical()
																						mesaDoPersonagem.chat:enviarMensagem(string.rep("-", 50) .. "\n[§K1][§K4]⚡⚡ CRITICAL ⚡⚡ --- ACERTOU O ALVO ---\n" .. string.rep("-", 50))
																					else
																						atualizarLog()
																					end;
																				elseif sheet.AcertouPergunta == "False" then
																					mesaDoPersonagem.chat:enviarMensagem("[§K2]--ERROU O ALVO--")
																				else 
																				end
																			end
																			)
																		end


																	end
																end
															return nomes
															end
															
															local nomesDeTodosOsItens = obterNomesRecursivoI(bibliotecaAtual);
														end;
														
													end
												end
											end;

											if sheet.GrupoRecebido == "2" then
												local nodes = ndb.getChildNodes(sheet.NomeJogador)
													
												for _, node in ipairs(nodes) do
													if node.NomeDoPersonagemVez == sheet.AlvoRecebido then
														if	self.BoxDetalheJogadores.visible == true then
															local node = self.rclGrupoJogadores.selectedNode;   
															self.rclGrupoJogadores.node = node;
															
															local mesas = rrpg.getRooms();
															local bibliotecaAtual = mesas[1].library;

															local function obterNomesRecursivoP(bibItem)
																local itensFilhos = bibItem.children;
																local nomes = bibItem.name;

																for i = 1, #itensFilhos, 1 do
																	local bibItemFilho = itensFilhos[i];
																	local nomesDoFilho = obterNomesRecursivoP(bibItemFilho) or "";

																	if nomesDoFilho == node.NomeDoPersonagem then
																		-- Obter ID do personagem Loan
																		local idPersonagem = bibItemFilho;

																		-- Solicita acesso à ficha do personagem
																		local promise = bibItemFilho:asyncOpenNDB();

																		-- Aguarda até que a ficha esteja carregada
																		local nodeExterno = await(promise);

																		-- Sincronizando

																		if nodeExterno.PA ~= nil or nodeExterno.PA == ""  then
																			node.PA = tonumber(nodeExterno.PA) or '0';
																			node.PM = tonumber(nodeExterno.PM) or '0';
																			node.PF = tonumber(nodeExterno.PF) or '0';
																			node.DEF = tonumber(nodeExterno.DEFRED) or '0';
																			node.RES = tonumber(nodeExterno.RESRED) or '0';
																			node.AC = tonumber(nodeExterno.Acerto) or '0';
																			node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
																			node.CR = tonumber(nodeExterno.Critical) or '0';
																			node.CRM = tonumber(nodeExterno.CMagico) or '0';
																			node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
																			node.Pers = tonumber(math.floor(nodeExterno.Persistencia) or '0');
																			node.Vez = node.Vez or '0';
																			node.Atletismo = tonumber(nodeExterno.TAtletismo) or '0';
																			node.Sabedoria = tonumber(nodeExterno.TSabedoria) or '0';
																			node.Percepcao = tonumber(nodeExterno.TPercepcao) or '0';
																			node.Acrobacia = tonumber(nodeExterno.TAcrobacia) or '0';
																			node.Vigor = tonumber(nodeExterno.TVigor) or '0';
																			node.HPBarMax = tonumber(nodeExterno.HPTotal) or '0';
																			node.MPBarMax = tonumber(math.floor(tonumber(nodeExterno.MPTotal)) or '0');
																			node.HPBar = tonumber(nodeExterno.HPAtual) or '0';
																			node.MPBar = tonumber(nodeExterno.MPAtual) or '0';
																			node.NomeDoPersonagemVez = node.Vez .. " - " ..  node.NomeDoPersonagem
																			node.imagemDoPersonagem = nodeExterno.imagemDoPersonagem
																		else
																			node.PA = tonumber(nodeExterno.Dano) or '0';
																			node.PM = tonumber(nodeExterno.DanoMagico) or '0';
																			node.PF = "NPC";
																			node.DEF = tonumber(nodeExterno.DefesaPorCent) or '0';
																			node.RES = tonumber(nodeExterno.ResistenciaPorCent) or '0';
																			node.AC = tonumber(nodeExterno.Acerto) or '0';
																			node.ACM = tonumber(nodeExterno.AcertoMagico) or '0';
																			node.CR = tonumber(nodeExterno.Critical) or '0';
																			node.CRM = tonumber(nodeExterno.CriticalMagico) or '0';
																			node.ESQ = tonumber(nodeExterno.Esquiva) or '0';
																			node.Pers = tonumber(math.floor(nodeExterno.Persistencia) or '0');
																			node.Vez = node.Vez or '0';
																			node.Atletismo = tonumber(nodeExterno.Atletismo) or '0';
																			node.Sabedoria = tonumber(nodeExterno.Sabedoria) or '0';
																			node.Percepcao = tonumber(nodeExterno.Percepcao) or '0';
																			node.Acrobacia = tonumber(nodeExterno.Acrobacia) or '0';
																			node.Vigor = tonumber(nodeExterno.TVigor) or '0';
																			node.HPBarMax = tonumber(nodeExterno.HPTotal) or '0';
																			node.MPBarMax = tonumber(math.floor(tonumber(nodeExterno.MPTotal)) or '0');
																			node.HPBar = tonumber(nodeExterno.HPAtual) or '0';
																			node.MPBar = tonumber(nodeExterno.MPAtual) or '0';
																			node.NomeDoPersonagemVez = node.Vez .. " - " ..  nodeExterno.Nome
																			node.imagemDoPersonagem = nodeExterno.imgInimigo
																		end;

																		if sheet.EscolheTipoAtaque == 'PA' or sheet.EscolheTipoAtaque == 'DF' or sheet.EscolheTipoAtaque == 'PA+PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + UsuarioEnvio.PAEffectTotal) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'M/PA' or sheet.EscolheTipoAtaque == 'M/DF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PAEffectTotal / 2)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'PA+M/PA' or sheet.EscolheTipoAtaque == 'DF' or sheet.EscolheTipoAtaque == 'PA+PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + UsuarioEnvio.PAEffectTotal) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'DF+M/DF' or sheet.EscolheTipoAtaque == 'DF' or sheet.EscolheTipoAtaque == 'PA+PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + UsuarioEnvio.PAEffectTotal) or 0)
																		end;

																		if sheet.EscolheTipoAtaque == 'PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + UsuarioEnvio.PFEffectTotal) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'M/PF' or sheet.EscolheTipoAtaque == 'M/DF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PFEffectTotal / 2)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'PF+M/PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + UsuarioEnvio.PFEffectTotal) or 0)
																		end;

																		if sheet.EscolheTipoAtaque == 'PM' or sheet.EscolheTipoAtaque == 'DM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PMEffectTotal or 0)) or 0)
																		end;	
																		if sheet.EscolheTipoAtaque == 'PM+M/PM' or sheet.EscolheTipoAtaque == 'DM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PMEffectTotal or 0)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'DM+M/DM' or sheet.EscolheTipoAtaque == 'DM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PMEffectTotal or 0)) or 0)
																		end;	
																																		
																		if sheet.EscolheTipoAtaque == 'PA+PM' or sheet.EscolheTipoAtaque == 'DF+DM' or sheet.EscolheTipoAtaque == 'PF+PM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PMEffectTotal or 0) + (UsuarioEnvio.PFEffectTotal or 0) ) or 0)
																		end;

																		if sheet.EscolheTipoAtaque == 'M/PA+PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PAEffectTotal / 2) + (UsuarioEnvio.PFEffectTotal)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'M/PF+PA' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PFEffectTotal / 2) + (UsuarioEnvio.PAEffectTotal)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'M/PF+M/PA' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PFEffectTotal / 2) + (UsuarioEnvio.PAEffectTotal / 2)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'M/PM' or sheet.EscolheTipoAtaque == 'M/DM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + UsuarioEnvio.PMEffectTotal / 2) or 0)
																		end;								

																		
																		if sheet.EscolheTipoAtaque == 'M/PM+PA' or sheet.EscolheTipoAtaque == 'M/DM+DF' or sheet.EscolheTipoAtaque == 'M/PM+PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + ((UsuarioEnvio.PMEffectTotal / 2) or 0) + (UsuarioEnvio.PAEffectTotal or 0)) or 0)
																		end;
																		if sheet.EscolheTipoAtaque == 'M/DF+DM' or sheet.EscolheTipoAtaque == 'M/PA+PM' or sheet.EscolheTipoAtaque == 'M/PF+PM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + ((UsuarioEnvio.PAEffectTotal / 2) or 0) + (UsuarioEnvio.PMEffectTotal or 0)) or 0)
																		end;


																		if sheet.EscolheTipoAtaque == 'M/PA+M/PM' or sheet.EscolheTipoAtaque == 'M/PF+M/PM' or sheet.EscolheTipoAtaque == 'M/DF+M/DM' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.RES + node.RESEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + ((UsuarioEnvio.PAEffectTotal / 2) or 0) + (UsuarioEnvio.PMEffectTotal /2) or 0) or 0)
																		end;

																		if sheet.EscolheTipoAtaque == 'REAL PA' or sheet.EscolheTipoAtaque == 'REAL PF' or sheet.EscolheTipoAtaque == 'REAL PM' or sheet.EscolheTipoAtaque == 'REAL DM' or sheet.EscolheTipoAtaque == 'REAL DF' or sheet.EscolheTipoAtaque == 'Real' then
																			sheet.RedutivelAtual = 0
																		end;

																		if sheet.EscolheTipoAtaque == 'Buff' or sheet.EscolheTipoAtaque == 'Defensiva' then
																			sheet.RedutivelAtual = 0
																		end;

																		if sheet.EscolheTipoAtaque == 'Efeito' then
																			sheet.RedutivelAtual = 0
																		end;			

																		if sheet.EscolheTipoAtaque == 'M/PA+M/PF' then
																			sheet.RedutivelAtual = tonumber(math.floor(node.DEF + node.DEFEffectTotal))
																			sheet.DanoRecebido = tonumber(math.floor(sheet.DanoRecebido + (UsuarioEnvio.PAEffectTotal / 2) + (UsuarioEnvio.PFEffectTotal / 2)) or 0)
																		end;
					
																		
																	
																		if sheet.UsuarioEnvio ~= nil then
																			DecideOqueRolar(
																			UsuarioEnvio, 
																			AlvoEnviou, 
																			sheet.TipoRecebido, 
																			sheet.UsuarioEnviouCusto,
																			self.BoxDetalheJogadores, 
																			self.BoxDetalheOponentes,
																			function()

																				-- Este código só executa DEPOIS que DecideOqueRolar terminar
																				if sheet.AcertouPergunta == "True" then
																					mesaDoPersonagem.chat:enviarMensagem("[§K1]---ACERTOU O ALVO---")
																					local danoFinal = (sheet.DanoRecebido or 0) * (1 - (tonumber(sheet.RedutivelAtual or 0) / 100))
																					sheet.DanoProLog = danoFinal
																					node.HPBar = tonumber(math.floor(node.HPBar - danoFinal))
																					nodeExterno.HPAtual = tonumber(node.HPBar) or '0'																					
																					if sheet.FoiCriticalLog == true then
																						atualizarLogCritical()
																						mesaDoPersonagem.chat:enviarMensagem(string.rep("-", 50) .. "\n[§K1][§K4]⚡⚡ CRITICAL ⚡⚡ --- ACERTOU O ALVO ---\n" .. string.rep("-", 50))
																					else																						
																						atualizarLog()
																					end;
																				elseif sheet.AcertouPergunta == "False" then
																					mesaDoPersonagem.chat:enviarMensagem("[§K2]--ERROU O ALVO--")
																				else 
																					showMessage('erro, reutilizar habilidade')
																				end
																			end
																			)
																		end
																	end
																end
															return nomes
															end
															local nomesDeTodosOsItens = obterNomesRecursivoP(bibliotecaAtual);
														end;
														
													end
												end
											end
										
									
										

									end
									sheet.UsuarioEnvio = nil
									sheet.TesteDecidido = nil
									sheet.AcertouPergunta = nil
								end;  
		</event>
	</dataLink>

	<dataLink fields="{'RecargaNome', 'QuemRecarregou'}">
		<event name="onChange">
			if sheet.QuemRecarregou ~= nil then
				sheet.QuemRecarregou = nil  -- Reseta o campo para evitar múltiplas mensagens
			end
		</event>
	</dataLink>


	

</form>
